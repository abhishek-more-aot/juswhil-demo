{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/babel-loader/lib/index.js!/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/user/list.vue?vue&type=template&id=7a6bb0ea&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/user/list.vue","mtime":1668755890995},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/babel.config.js","mtime":1668754947334},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/babel-loader/lib/index.js","mtime":1668596430903},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.staticRenderFns = exports.render = void 0;
var render = function render() {
  var _vm = this,
    _c = _vm._self._c,
    _setup = _vm._self._setupProxy;
  return _c('div', {
    staticClass: "app-container"
  }, [_c('div', {
    staticClass: "filter-container"
  }, [_c('el-input', {
    staticClass: "filter-item",
    staticStyle: {
      "width": "170px"
    },
    attrs: {
      "placeholder": "Name",
      "clearable": ""
    },
    on: {
      "input": _vm.handleFilter
    },
    model: {
      value: _vm.listQuery.fullName,
      callback: function ($$v) {
        _vm.$set(_vm.listQuery, "fullName", $$v);
      },
      expression: "listQuery.fullName"
    }
  }), _c('el-input', {
    staticClass: "filter-item",
    staticStyle: {
      "width": "170px"
    },
    attrs: {
      "placeholder": "Email",
      "clearable": ""
    },
    on: {
      "input": _vm.handleFilter
    },
    model: {
      value: _vm.listQuery.email,
      callback: function ($$v) {
        _vm.$set(_vm.listQuery, "email", $$v);
      },
      expression: "listQuery.email"
    }
  }), _c('el-input', {
    staticClass: "filter-item",
    staticStyle: {
      "width": "170px"
    },
    attrs: {
      "placeholder": "Contact number",
      "clearable": "",
      "maxlength": "10"
    },
    on: {
      "input": _vm.handleFilter
    },
    model: {
      value: _vm.listQuery['userContact.contactNumber'],
      callback: function ($$v) {
        _vm.$set(_vm.listQuery, 'userContact.contactNumber', $$v);
      },
      expression: "listQuery['userContact.contactNumber']"
    }
  }), _c('el-input', {
    staticClass: "filter-item",
    staticStyle: {
      "width": "170px"
    },
    attrs: {
      "placeholder": "Pincode",
      "clearable": ""
    },
    on: {
      "input": _vm.handleFilter
    },
    model: {
      value: _vm.listQuery.pincode,
      callback: function ($$v) {
        _vm.$set(_vm.listQuery, "pincode", $$v);
      },
      expression: "listQuery.pincode"
    }
  }), _c('el-select', {
    staticClass: "filter-item",
    staticStyle: {
      "width": "140px"
    },
    on: {
      "change": _vm.handleFilter
    },
    model: {
      value: _vm.listQuery.sort,
      callback: function ($$v) {
        _vm.$set(_vm.listQuery, "sort", $$v);
      },
      expression: "listQuery.sort"
    }
  }, _vm._l(_vm.sortOptions, function (item) {
    return _c('el-option', {
      key: item.key,
      attrs: {
        "label": item.label,
        "value": item.key
      }
    });
  }), 1), _c('el-button', {
    directives: [{
      name: "waves",
      rawName: "v-waves"
    }],
    staticClass: "filter-item",
    attrs: {
      "type": "primary",
      "icon": "el-icon-search"
    },
    on: {
      "click": _vm.handleFilter
    }
  }, [_vm._v(" " + _vm._s(_vm.$t("table.search")) + " ")]), _c('router-link', {
    staticClass: "margin-horizontal",
    attrs: {
      "to": '/user/add'
    }
  }, [_c('el-button', {
    directives: [{
      name: "waves",
      rawName: "v-waves"
    }],
    staticClass: "filter-item",
    attrs: {
      "type": "primary",
      "icon": "el-icon-plus"
    }
  }, [_vm._v(" Add Distributor ")])], 1), _c('el-button', {
    directives: [{
      name: "waves",
      rawName: "v-waves"
    }],
    staticClass: "filter-item",
    attrs: {
      "loading": _vm.downloadLoading,
      "type": "primary",
      "icon": "el-icon-download"
    },
    on: {
      "click": _vm.handleDownload
    }
  }, [_vm._v(" " + _vm._s(_vm.$t("table.export")) + " ")]), _c('el-button', {
    attrs: {
      "disabled": _vm.multipleSelection.length <= 0,
      "type": "danger",
      "icon": "el-icon-delete",
      "round": ""
    },
    on: {
      "click": _vm.handleMultipleDelete
    }
  }, [_vm._v(" Delete ")]), _c('el-checkbox', {
    staticClass: "filter-item",
    staticStyle: {
      "margin-left": "15px"
    },
    on: {
      "change": function ($event) {
        _vm.tableKey = _vm.tableKey + 1;
      }
    },
    model: {
      value: _vm.showCreatedDate,
      callback: function ($$v) {
        _vm.showCreatedDate = $$v;
      },
      expression: "showCreatedDate"
    }
  }, [_vm._v(" " + _vm._s(_vm.$t("table.createdDate")) + " ")])], 1), _c('el-tabs', {
    attrs: {
      "type": "border-card",
      "value": "cnf"
    },
    on: {
      "tab-click": _vm.handleClick
    }
  }, [_c('el-tab-pane', {
    attrs: {
      "label": "CNF",
      "name": "cnf"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "clearable": "",
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 4042880915)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "User",
      "name": "user"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 647476958)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "Super Stockist",
      "name": "superstockist"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "CD",
      "name": "cd"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "SD",
      "name": "sd"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "WB",
      "name": "wb"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "MRP",
      "name": "mrp"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "COP",
      "name": "cop"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1), _c('el-tab-pane', {
    attrs: {
      "label": "SOP",
      "name": "sop"
    }
  }, [_c('el-table', {
    directives: [{
      name: "loading",
      rawName: "v-loading",
      value: _vm.listLoading,
      expression: "listLoading"
    }],
    key: _vm.tableKey,
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "data": _vm.list,
      "border": "",
      "fit": "",
      "highlight-current-row": ""
    },
    on: {
      "sort-change": _vm.sortChange
    }
  }, [_c('el-table-column', {
    attrs: {
      "sortable": "custom",
      "width": "100px",
      "align": "center",
      "label": _vm.$t('table.id'),
      "prop": "id",
      "class-name": _vm.getSortClass('id')
    }
  }), _c('el-table-column', {
    attrs: {
      "width": "90",
      "align": "center",
      "label": "Enable/Disable",
      "prop": ""
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('enabled', {
          key: scope.row.id,
          attrs: {
            "url": '/users/' + scope.row.id
          },
          model: {
            value: scope.row.enabled,
            callback: function ($$v) {
              _vm.$set(scope.row, "enabled", $$v);
            },
            expression: "scope.row.enabled"
          }
        })];
      }
    }])
  }), _c('el-table-column', {
    attrs: {
      "label": "Distributor Details",
      "width": "350px"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-row', {
          staticStyle: {
            "text-align": "left"
          },
          attrs: {
            "type": "flex",
            "justify": "",
            "span": 24,
            "gutter": 20
          }
        }, [_c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.fullName))]), _c('br'), _c('br'), _c('b', [_vm._v("Company Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.companyName))]), _c('br'), _c('br'), _c('b', [_vm._v("Email Address:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.email))]), _c('br'), _c('br')]), _c('el-col', {
          attrs: {
            "span": 12
          }
        }, [_c('b', [_vm._v("Pincode Number:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.pincode))]), _c('br'), _c('br'), _c('b', [_vm._v("City Name:")]), _vm._v("  "), _c('span', [_vm._v(_vm._s(scope.row.city))]), _c('br'), _c('br'), _c('b', [_vm._v("Registered Number:")]), _vm._v("  "), _vm._l(scope.row.userContact, function (contact) {
          return _c('span', {
            key: contact.id
          }, [_vm._v(" " + _vm._s(contact.contactNumber)), _c('br'), _c('br')]);
        })], 2)], 1)];
      }
    }])
  }), _vm.showCreatedDate ? _c('el-table-column', {
    attrs: {
      "label": _vm.$t('table.createdDate'),
      "width": "150px",
      "align": "center"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('span', {
          staticStyle: {
            "color": "red"
          }
        }, [_vm._v(_vm._s(_vm._f("moment")(scope.row.createdTimestamp, "from")))])];
      }
    }], null, false, 912526870)
  }) : _vm._e(), this.roleName == 'superadmin' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Convert",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.status,
            callback: function ($$v) {
              _vm.$set(scope.row, "status", $$v);
            },
            expression: "scope.row.status"
          }
        }, _vm._l(_vm.userList, function (item) {
          return _c('el-option', {
            key: item.value,
            attrs: {
              "label": item.label,
              "value": item.value
            }
          });
        }), 1), _c('br'), _c('br'), _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateDistributor(scope.row);
            }
          }
        }, [_vm._v(" Convert ")])];
      }
    }], null, false, 1228201919)
  }) : _vm._e(), _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Asm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.superAdminId,
            callback: function ($$v) {
              _vm.$set(scope.row, "superAdminId", $$v);
            },
            expression: "scope.row.superAdminId"
          }
        }, _vm._l(_vm.asmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateAsm(scope.row);
            }
          }
        }, [_vm._v(" Assign Asm ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeAsm(scope.row);
            }
          }
        }, [_vm._v(" Remove ASM ")]) : _vm._e()];
      }
    }])
  }), this.roleName == 'superadmin' || this.roleName == 'RSM' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Rsm",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.rsmId,
            callback: function ($$v) {
              _vm.$set(scope.row, "rsmId", $$v);
            },
            expression: "scope.row.rsmId"
          }
        }, _vm._l(_vm.rsmList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateRsm(scope.row);
            }
          }
        }, [_vm._v(" Assign RSM ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeRsm(scope.row);
            }
          }
        }, [_vm._v(" Remove RSM ")]) : _vm._e()];
      }
    }], null, false, 3027992638)
  }) : _vm._e(), this.roleName == 'superadmin' || this.roleName == 'Zonal Head' ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": "Zonal Head",
      "width": "220"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('el-select', {
          attrs: {
            "placeholder": "Select"
          },
          model: {
            value: scope.row.zoneHeadId,
            callback: function ($$v) {
              _vm.$set(scope.row, "zoneHeadId", $$v);
            },
            expression: "scope.row.zoneHeadId"
          }
        }, _vm._l(_vm.zonalList, function (item) {
          return _c('el-option', {
            key: item.id,
            attrs: {
              "label": item.fullName,
              "value": item.id
            }
          });
        }), 1), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.updateZonal(scope.row);
            }
          }
        }, [_vm._v(" Assign Zonal Head ")]) : _vm._e(), _c('br'), _c('br'), _vm.roleName == 'superadmin' ? _c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          },
          on: {
            "click": function ($event) {
              return _vm.removeZonal(scope.row);
            }
          }
        }, [_vm._v(" Remove Zonal ")]) : _vm._e()];
      }
    }], null, false, 1096311414)
  }) : _vm._e(), _vm.myRole.indexOf('superadmin') > -1 ? _c('el-table-column', {
    attrs: {
      "align": "center",
      "label": _vm.$t('table.actions'),
      "width": "180"
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function (scope) {
        return [_c('router-link', {
          staticClass: "margin-horizontal",
          attrs: {
            "to": '/userContact/list/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          staticClass: "filter-item",
          attrs: {
            "type": "success"
          }
        }, [_vm._v(" Add Contact ")])], 1), _c('br'), _c('br'), _c('el-popover', {
          attrs: {
            "placement": "right",
            "width": "500",
            "trigger": "click"
          }
        }, [_c('el-table', {
          attrs: {
            "data": _vm.statusDetails
          }
        }, [_c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "admin.fullName",
            "label": "Admin Name"
          }
        }), _c('el-table-column', {
          attrs: {
            "width": "200",
            "property": "",
            "label": "status"
          },
          scopedSlots: _vm._u([{
            key: "default",
            fn: function (scope) {
              return [scope.row.status == 1 ? _c('span', [_vm._v("User")]) : _vm._e(), scope.row.status == 2 ? _c('span', [_vm._v("CNF")]) : _vm._e(), scope.row.status == 3 ? _c('span', [_vm._v("Super Socket")]) : _vm._e(), scope.row.status == 4 ? _c('span', [_vm._v("CD")]) : _vm._e(), scope.row.status == 5 ? _c('span', [_vm._v("SD")]) : _vm._e(), scope.row.status == 6 ? _c('span', [_vm._v("WB")]) : _vm._e(), scope.row.status == 7 ? _c('span', [_vm._v("MRP")]) : _vm._e(), scope.row.status == 8 ? _c('span', [_vm._v("COP")]) : _vm._e(), scope.row.status == 9 ? _c('span', [_vm._v("SOP")]) : _vm._e()];
            }
          }], null, true)
        })], 1), _c('el-button', {
          directives: [{
            name: "loading",
            rawName: "v-loading",
            value: _vm.userStatusLoading,
            expression: "userStatusLoading"
          }],
          attrs: {
            "slot": "reference",
            "size": "small",
            "type": "warning"
          },
          on: {
            "click": function ($event) {
              return _vm.getUserStatusLog(scope.row);
            }
          },
          slot: "reference"
        }, [_vm._v(" History ")])], 1), _c('br'), _c('br'), _c('router-link', {
          attrs: {
            "to": '/user/edit/' + scope.row.id
          }
        }, [_c('el-button', {
          directives: [{
            name: "waves",
            rawName: "v-waves"
          }],
          attrs: {
            "type": "warning",
            "size": "small",
            "icon": "el-icon-edit"
          }
        })], 1)];
      }
    }], null, false, 544249515)
  }) : _vm._e()], 1), _c('pagination', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.total > 0,
      expression: "total > 0"
    }],
    attrs: {
      "total": _vm.total,
      "page": _vm.listQuery.page,
      "limit": _vm.listQuery.limit
    },
    on: {
      "update:page": function ($event) {
        return _vm.$set(_vm.listQuery, "page", $event);
      },
      "update:limit": function ($event) {
        return _vm.$set(_vm.listQuery, "limit", $event);
      },
      "pagination": _vm.getList
    }
  })], 1)], 1)], 1);
};
exports.render = render;
var staticRenderFns = [];
exports.staticRenderFns = staticRenderFns;"},null]}