{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/callback/list.vue?vue&type=style&index=0&id=56b80f04&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/callback/list.vue","mtime":1668755750601},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lZGl0LWlucHV0IHsKICBwYWRkaW5nLXJpZ2h0OiAxMDBweDsKfQoKLmNhbmNlbC1idG4gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICByaWdodDogMTVweDsKICB0b3A6IDEwcHg7Cn0K"},{"version":3,"sources":["list.vue"],"names":[],"mappings":";AA6eA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"list.vue","sourceRoot":"src/views/callback","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n    \n      <el-input\n        v-model=\"listQuery.number\"\n        placeholder=\"Mobile Number\"\n        clearable\n        class=\"filter-item\"\n        style=\"width: 160px\"\n        @input=\"handleFilter\"\n      />\n\n      <el-select\n        v-model=\"listQuery.sort\"\n        style=\"width: 140px\"\n        class=\"filter-item\"\n        @change=\"handleFilter\"\n      >\n        <el-option\n          v-for=\"item in sortOptions\"\n          :key=\"item.key\"\n          :label=\"item.label\"\n          :value=\"item.key\"\n        />\n      </el-select>\n\n      <el-select\n        v-model=\"listQuery.isIntrested\"\n        style=\"width: 140px\"\n        class=\"filter-item\"\n        :clearable=\"true\"\n        @change=\"handleFilter\"\n        placeholder=\"Is Interested\"\n      >\n        <el-option\n          v-for=\"item in intrestedOptions\"\n          :key=\"item.key\"\n          :label=\"item.label\"\n          :value=\"item.key\"\n        />\n      </el-select>\n\n      <el-select\n        v-model=\"listQuery.isContacted\"\n        style=\"width: 140px\"\n        class=\"filter-item\"\n        :clearable=\"true\"\n        @change=\"handleFilter\"\n        placeholder=\"Is Contacted\"\n      >\n        <el-option\n          v-for=\"item in contactedOptions\"\n          :key=\"item.key\"\n          :label=\"item.label\"\n          :value=\"item.key\"\n        />\n      </el-select>\n\n      <el-button\n        v-waves\n        class=\"filter-item\"\n        type=\"primary\"\n        icon=\"el-icon-search\"\n        @click=\"handleFilter\"\n      >\n        {{ $t(\"table.search\") }}\n      </el-button>\n      <!-- <router-link\n        :to=\"'/news/add'\"\n        class=\"margin-horizontal\"\n      >\n        <el-button\n          v-waves\n          class=\"filter-item\"\n          type=\"warning\"\n          icon=\"el-icon-plus\"\n        >\n          Add\n        </el-button>\n      </router-link>\n      <el-checkbox\n        v-model=\"showSortingOption\"\n        class=\"filter-item\"\n        style=\"margin-left: 15px\"\n        @change=\"onPriortyChange()\"\n      >\n        Change Priority\n      </el-checkbox> -->\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      ref=\"dragTable\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      row-key=\"id\"\n      highlight-current-row\n      style=\"width: 100%\"\n      @sort-change=\"sortChange\"\n    >\n      <el-table-column\n        sortable=\"custom\"\n        width=\"80\"\n        align=\"center\"\n        :label=\"$t('table.id')\"\n        prop=\"id\"\n        :class-name=\"getSortClass('id')\"\n      />\n\n      <!-- <el-table-column\n        width=\"130\"\n        align=\"center\"\n        label=\"Enable/Disable\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <enabled\n            :key=\"scope.row.id\"\n            v-model=\"scope.row.enabled\"\n            :url=\"'/enquiry/' + scope.row.id\"\n          />\n        </template>\n      </el-table-column> -->\n\n      <!-- <el-table-column label=\"Enquiry Details\">\n        <template slot-scope=\"scope\">\n          <el-row\n            type=\"flex\"\n            justify=\"\"\n            :span=\"24\"\n            style=\"text-align: left;\"\n          >\n            <el-col :span=\"16\">\n              <b>Name:</b> <br><span>{{ scope.row.name }}</span>\n              <br><br>\n              <b>Mobile Number:</b> <br><span>{{ scope.row.number }}</span>\n              <br><br>\n              <b>Email:</b> <br><span>{{ scope.row.email }}</span>\n              <br><br>\n              <b>Message:</b> <br><span>{{ scope.row.message }}</span>\n            </el-col>\n          </el-row>\n        </template>\n      </el-table-column> -->\n\n      <el-table-column label=\"Mobile Number\">\n          <template slot-scope=\"scope\">\n              <span><b>Mobile Number: </b><br> {{ scope.row.number }}</span>\n          </template>\n      </el-table-column>\n\n      <el-table-column label=\"Is Interested\">\n          <template slot-scope=\"scope\">\n              <span><b>Is Interested: </b>\n                <el-switch\n                  v-model=\"scope.row.isIntrested\"\n                  active-color=\"#13ce66\"\n                  inactive-color=\"#ff4949\"\n                  @change=\"interestedUpdate(scope.row.id, scope.row.isIntrested)\"\n                  >\n                </el-switch>\n              </span>\n          </template>\n      </el-table-column>\n\n      <el-table-column label=\"Is Contacted\">\n          <template slot-scope=\"scope\">\n              <span><b>Is Contacted: </b>\n                <el-switch\n                  v-model=\"scope.row.isContacted\"\n                  active-color=\"#13ce66\"\n                  inactive-color=\"#ff4949\"\n                  @change=\"contactedUpdate(scope.row.id, scope.row.isContacted)\"\n                  >\n                </el-switch>\n              </span>\n          </template>\n      </el-table-column>\n\n      <!-- <el-table-column\n        align=\"center\"\n        :label=\"$t('table.actions')\"\n        width=\"150\"\n        class-name=\"fixed-width\"\n      >\n        <template slot-scope=\"scope\">\n          <router-link :to=\"'/callback/edit/' + scope.row.id\">\n            <el-button\n              type=\"warning\"\n              size=\"small\"\n              icon=\"el-icon-edit\"\n            />\n          </router-link>&nbsp;\n          <el-button\n            class=\"filter-item\"\n            type=\"danger\"\n            size=\"small\"\n            icon=\"el-icon-delete\"\n            @click=\"handleIsDelete(scope.row)\"\n          />\n          <el-button\n            size=\"small\"\n            type=\"danger\"\n            icon=\"el-icon-delete\"\n            @click=\"handleDelete(scope.row)\"\n          />\n        </template>\n      </el-table-column> -->\n      \n      <!-- <el-table-column\n        width=\"180px\"\n        align=\"center\"\n        :label=\"$t('news.state')\"\n        prop=\"state.name\"\n      />\n      <el-table-column\n        width=\"180px\"\n        align=\"center\"\n        :label=\"$t('news.city')\"\n        prop=\"city.name\" -->\n      />\n      <el-table-column\n        v-if=\"showCreatedDate\"\n        :label=\"$t('table.createdDate')\"\n        width=\"110px\"\n        align=\"center\"\n      >\n        <template slot-scope=\"scope\">\n          <el-tooltip\n            class=\"item\"\n            effect=\"dark\"\n            :content=\"\n              scope.row.createdTimestamp | moment('MMMM Do YYYY, hh:mm a')\n            \"\n            placement=\"top\"\n          >\n            <span style=\"color: red\">{{\n              scope.row.createdTimestamp | moment(\"from\")\n            }}</span>\n          </el-tooltip>\n        </template>\n      </el-table-column>\n      <!-- Sandesh create stats if possible -->\n      <!-- <el-table-column align=\"center\" :label=\"$t('table.actions')\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <router-link :to=\"'/news/view/'+scope.row.id\">\n            <el-button v-waves type=\"primary\" size=\"small\" icon=\"el-icon-eye\"/>\n          </router-link>\n        </template>\n      </el-table-column>-->\n    </el-table>\n\n    <pagination\n      v-show=\"total > 0 && !this.showSortingOption\"\n      :total=\"total\"\n      :page.sync=\"listQuery.page\"\n      :limit.sync=\"listQuery.limit\"\n      @pagination=\"getList\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator'\nimport {\n  defaultCallbackData,\n  getCallback,\n  getFilters,\n  updateCallback,\n  getCallbackById\n} from '@/api/callback'\nimport { ICallbackData } from '@/api/types'\nimport Pagination from '@/components/Pagination/index.vue'\nimport { getQuery, formatJson } from '@/utils/index'\nimport { exportJson2Excel } from '@/utils/excel'\nimport Sortable from 'sortablejs'\nimport Enabled from '@/components/Enabled/index.vue'\nimport { getCategoryById } from '@/api/category'\n\n@Component({\n  name: 'CallbackList',\n  components: {\n    Pagination,\n    Enabled\n  }\n})\nexport default class extends Vue {\n  private tableKey = 0;\n  private total = 0;\n  private list: ICallbackData[] = [];\n  private listLoading = true;\n  private isIntrested = false;\n  private isContacted = false;\n  newList: any = [];\n  oldList: any = [];\n  private showSortingOption: boolean = false;\n  private renderComponent: boolean = true;\n  private downloadLoading = false;\n  sortable: any;\n  private listQuery = {\n    page: 1,\n    limit: 20,\n    sort: 'id,ASC',\n    filter: {\n      // id: 'ne',\n      enabled: 'eq',\n      number: '$contL',\n      isIntrested: 'eq',\n      isContacted: 'eq'\n    }\n  };\n\n  private showCreatedDate: boolean = false;\n  private sortOptions = [\n    { label: 'ID Ascending', key: 'id,ASC' },\n    { label: 'ID Descending', key: 'id,DESC' }\n  ];\n\n  private intrestedOptions = [\n    { label: 'Interested', key: true },\n    { label: 'Not Interested', key: false }\n  ];\n\n  \n  private contactedOptions = [\n    { label: 'Contacted', key: true },\n    { label: 'Not Contacted', key: false }\n  ];\n\n  private enableTypeOptions = [\n    { key: true, value: 'Enable' },\n    { key: false, value: 'Disabled' }\n  ];\n\n  private filters: any = [];\n\n  created() {\n    this.getList()\n  }\n\n  private async interestedUpdate(id: number, isIntrested: any) {\n    const data: any = await getCallbackById(id)\n    data.isIntrested = isIntrested\n    updateCallback(id, data)\n  }\n   \n  private async contactedUpdate(id: number, isContacted: any) {\n    const data: any = await getCallbackById(id)\n    data.isContacted = isContacted\n    updateCallback(id, data)\n  }\n\n  private async getList() {\n    try {\n      this.listLoading = true\n      const data: any = await getCallback(getQuery(this.listQuery))\n      this.list = data.data\n      this.total = data.total\n      this.listLoading = false\n    } catch (error) {\n      this.listLoading = false\n    }\n  }\n\n  private async getFilters() {\n    this.filters = await getFilters(\n      getQuery({\n        sort: 'name,ASC'\n      })\n    )\n  }\n\n  private handleFilter() {\n    this.listQuery.page = 1\n    this.getList()\n  }\n\n  async onPriortyChange() {\n    if (this.showSortingOption) {\n      this.fetchAllRecored(true)\n    } else {\n      this.renderComponent = false\n      this.sortable.options.disabled = true\n      this.$nextTick().then(() => {\n        this.renderComponent = true\n      })\n    }\n    \n  }\n\n    async fetchAllRecored(checkForFirstTime: boolean) {\n    try {\n      this.listLoading = true\n      const data: any = await getCallback(\n        getQuery({\n          page: 1,\n          limit: 100000,\n          sort: 'priority,ASC',\n          filter: {\n            enabled: 'eq',\n            isDeleted: 'eq'\n          }\n        })\n        \n      )\n      this.list = data.data\n      this.total = data.total\n      this.listLoading = false\n      if (checkForFirstTime) {\n        this.oldList = this.list.map((v) => v.id)\n        this.newList = this.oldList.slice()\n        this.$nextTick(this.setSort)\n      }\n    } catch (error) {\n      this.listLoading = false\n    }\n  }\n\n    setSort() {\n    const temp: any = this.$refs.dragTable\n    const el = temp.$el.querySelectorAll(\n      '.el-table__body-wrapper > table > tbody'\n    )[0]\n    this.sortable = Sortable.create(el, {\n      ghostClass: 'sortable-ghost',\n      setData: function(dataTransfer) {\n        dataTransfer.setData('Text', '')\n      },\n      onEnd: (evt) => {\n        const targetRow = this.list.splice(Number(evt.oldIndex), 1)[0]\n        this.list.splice(Number(evt.newIndex), 0, targetRow)\n        const tempIndex = this.newList.splice(evt.oldIndex, 1)[0]\n        this.newList.splice(evt.newIndex, 0, tempIndex)\n        console.log(this.newList)\n      }\n    })\n  }\n\n//   private async updateOrder() {\n//     try {\n//       const updateCheck = await updateOrder(this.newList)\n//       this.fetchAllRecored(false)\n//       // eslint-disable-next-line no-empty\n//     } catch (error) {}\n//   }\n\n  private sortChange(data: any) {\n    const { prop, order } = data\n    if (prop) {\n      this.listQuery.sort =\n        `${prop},` + (order === 'ascending' ? 'ASC' : 'DESC')\n      this.handleFilter()\n    }\n  }\n\n  private getSortClass(key: string) {\n    const sort = this.listQuery.sort\n    return sort === `${key},ASC`\n      ? 'ascending'\n      : sort === `${key},DESC`\n        ? 'descending'\n        : ''\n  }\n\n  private handleDownload() {\n    this.downloadLoading = true\n    const tHeader = [\n      'ID',\n      'Full Name',\n      'Email',\n      'Contact Number',\n      'Status',\n      'timestamp'\n    ]\n    const filterVal = [\n      'id',\n      'fullName',\n      'email',\n      'contactNumber',\n      'enabled',\n      'createdTimestamp'\n    ]\n    const data = formatJson(filterVal, this.list)\n    exportJson2Excel(tHeader, data, this.$tc('route.enquiry.description'))\n    this.downloadLoading = false\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.edit-input {\n  padding-right: 100px;\n}\n\n.cancel-btn {\n  position: absolute;\n  right: 15px;\n  top: 10px;\n}\n</style>\n"]}]}