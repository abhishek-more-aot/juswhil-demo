{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/category/components/CategoryDetail.vue?vue&type=style&index=1&id=63372171&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/category/components/CategoryDetail.vue","mtime":1673526221179},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jcmVhdGVQb3N0LWNvbnRhaW5lciB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwoKICAuY3JlYXRlUG9zdC1tYWluLWNvbnRhaW5lciB7CiAgICBwYWRkaW5nOiA0MHB4IDQ1cHggMjBweCA1MHB4OwoKICAgIC5wb3N0SW5mby1jb250YWluZXIgewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIEBpbmNsdWRlIGNsZWFyZml4OwogICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwoKICAgICAgLnBvc3RJbmZvLWNvbnRhaW5lci1pdGVtIHsKICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgfQogICAgfQogIH0KLmF2YXRhciB7CiAgd2lkdGg6IDQwMHB4OwogIGhlaWdodDogMjAwcHg7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0cmFuc2Zvcm0tb3JpZ2luOiA5NSUgNDAlOwp9CgogIC53b3JkLWNvdW50ZXIgewogICAgd2lkdGg6IDQwcHg7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICByaWdodDogMTBweDsKICAgIHRvcDogMHB4OwogIH0KfQo="},{"version":3,"sources":["CategoryDetail.vue"],"names":[],"mappings":";AA2XA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CategoryDetail.vue","sourceRoot":"src/views/category/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        status-icon\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n      >\n        <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n        >\n          <el-switch v-model=\"postForm.enabled\" />\n        </el-form-item>\n\n        <el-form-item\n          label=\"Category Name\"\n          prop=\"name\"\n          style=\"margin-bottom: 30px;\"\n        >\n          <el-input\n            v-model=\"postForm.name\"\n            name=\"name\"\n            style=\"width:50%\"\n            required\n            placeholder=\"Category Name\"\n          />\n        </el-form-item>\n         <el-form-item style=\"margin-bottom: 30px\" label=\"Image\" prop=\"image\">\n            <upload-image\n              :key=\"renderKey\"\n              :form-field=\"postForm.image\"\n              @handle-upload=\"updateImage\"\n              @handle-remove=\"removeImage\"\n            />\n          </el-form-item>\n\n        <!-- <el-form-item\n          style=\"margin-bottom: 30px\"\n          label=\"Icon\"\n          prop=\"image\"\n        >\n          <pan-thumb :image=\"image\" /><br>\n          <el-button\n            type=\"primary\"\n            icon=\"el-icon-upload\"\n            name=\"image\"\n            tyle=\"position: absolute;bottom: 15px;margin-left: 40px;\"\n            @click=\"toggleShow\"\n          >\n            Change Icon\n          </el-button>\n          <span style=\"font-weight:500\"> (Minimum required resolution : 300*300)</span>\n          <avatar-upload\n            v-model=\"showImageUpload\"\n            field=\"avatar\"\n            name=\"image\"\n            @crop-success=\"cropSuccess\"\n            @close=\"onClose\"\n            @crop-upload-success=\"onCropUploadSuccess\"\n          />\n        </el-form-item> -->\n\n        <!-- <el-form-item\n          style=\"margin-bottom: 30px\"\n          label=\"Price\"\n          prop=\"price\"\n        >\n          <el-input\n            type=\"number\"\n            v-model=\"postForm.price\"\n            name=\"price\"\n            style=\"width:50%\"\n            required\n            placeholder=\"Price\"\n          />\n        </el-form-item> -->\n\n        <!-- <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Sub Category\"\n          prop=\"isSubCategory\"\n        >\n          <el-switch v-model=\"postForm.isSubCategory\" />\n        </el-form-item> -->\n\n        <!-- <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Feature\"\n          prop=\"feature\"\n        >\n          <el-switch v-model=\"postForm.feature\" />\n        </el-form-item> -->\n\n        <el-form-item>\n          <el-button\n            v-loading=\"loading\"\n            v-waves\n            type=\"success\"\n            style=\"background:#59b6e3;border:1px solid #59b6e3\"\n            @click=\"submitForm\"\n          >\n            {{ $t('global.form.save') }}\n          </el-button>\n          <el-button\n            v-waves\n            type=\"reset\"\n            @click=\"resetForm\"\n          >\n            {{ $t('global.form.reset') }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator'\nimport {\n  getCategoryById,\n  defaultCategoryData,\n  updateCategory,\n  addCategory\n} from '@/api/category'\nimport { AppModule } from '@/store/modules/app'\nimport { TagsViewModule, ITagView } from '@/store/modules/tags-view'\nimport { Form } from 'element-ui'\nimport router from './../../../router'\nimport { Action } from 'vuex-module-decorators'\nimport Dropzone from '@/components/Dropzone/index.vue'\nimport { uploadFile } from '@/api/common'\nimport AvatarUpload from '@/components/AvatarUpload/index.vue'\nimport PanThumb from '@/components/PanThumb/index.vue'\nimport UploadImage from '@/components/UploadImage/index.vue'\n@Component({\n  name: 'CategoryDetail',\n  components: {\n    Dropzone,\n    AvatarUpload,\n    PanThumb,\n    UploadImage\n  }\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n  private dialogVisibility:boolean=false\n   private showImageUpload = false\n   private showSketchUpload = false\n  private sketch = 'https://via.placeholder.com/300'\n  private image = 'https://via.placeholder.com/300'\n  private resetImage = 'https://via.placeholder.com/300'\n  private params = { some_params: 'your_params_goes_here' }\n  private headers = { smail: '*_~' }\n  private renderKey:any;\n\n  private postForm = Object.assign({}, defaultCategoryData);\n  private loading = false;\n  private rules = {\n    name: [\n      { required: true, message: 'Please enter category name', trigger: 'blur' },\n      {\n        min: 3,\n        max: 150,\n        message: 'Length should be 3 to 150',\n        trigger: 'blur'\n      },\n      // {\n      //   pattern: '^[a-zA-Z]',\n      //   message: 'No Special Characters allowed',\n      //   trigger: ['blur', 'change']\n      // },\n      // {\n      //   pattern: '^[a-zA-Z]{4,}(?: [a-zA-Z]+)?(?: [a-zA-Z]+)?$',\n      //   message: 'Spaces are not allowed',\n      //   trigger: ['blur', 'change']\n      // }\n    ],\n\n    image: [\n      {\n        message: 'Please enter image',\n        required: true,\n        trigger: 'blur'\n      }\n      // { validator: this.validateImage, trigger: 'blur' }\n    ],\n    sketchImage: [\n      {\n        message: 'Please enter sketch Image',\n        required: true,\n        trigger: 'blur'\n      }\n      // { validator: this.validateImage, trigger: 'blur' }\n    ],\n    priority: [\n      { required: true, message: 'Please enter priority', trigger: 'blur' }\n\n    ]\n\n  };\n\n  private toggleShow() {\n    this.showImageUpload = !this.showImageUpload\n  }\n\n  private toggleSketch() {\n    this.showSketchUpload = !this.showSketchUpload\n  }\n  private updateImage(res:any){\n    this.postForm.image = res\n  }\n  private removeImage(){\n    this.postForm.image = ''\n  }\n\n  private cropSuccess(imgDataUrl: string, field: string) {\n    this.image = imgDataUrl\n    const data = new FormData()\n    fetch(imgDataUrl)\n      .then((res) => res.blob())\n      .then((blob) => {\n        const file = new File([blob], 'img.' + blob.type.split('/')[1], {\n          type: 'image/png'\n        })\n        data.append('file', file)\n        uploadFile(data, (event: ProgressEvent) => {\n          console.log(event)\n        }).then((res: any) => {\n          this.postForm.image = res\n        })\n      })\n  }\n\n  // private cropSketchSuccess(imgDataUrl: string, field: string) {\n  //   this.sketch = imgDataUrl\n  //   const data = new FormData()\n  //   fetch(imgDataUrl)\n  //     .then((res) => res.blob())\n  //     .then((blob) => {\n  //       const file = new File([blob], 'img.' + blob.type.split('/')[1], {\n  //         type: 'image/png'\n  //       })\n  //       data.append('file', file)\n  //       uploadFile(data, (event: ProgressEvent) => {\n  //         console.log(event)\n  //       }).then((res: any) => {\n  //         this.postForm.sketchImage = res\n  //       })\n  //     })\n  // }\n\n  // validateImage (rule:any, value:any, callback:any) {\n  //   \n  //     if (this.postForm.image.length<=0) {\n  //       \n  //       callback(new Error('Icon is required'));\n  //     } else {\n  //       callback();\n  //     }\n  //   };\n\n  private onClose() {\n    this.showImageUpload = false\n  }\n\n  private onSketchClose() {\n    this.showSketchUpload = false\n  }\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language\n  }\n\n  created() {\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id\n      this.fetchData(parseInt(id))\n    } else {\n      this.postForm = Object.assign({}, defaultCategoryData)\n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route)\n  }\n\n  private async fetchData(id: number) {\n    try {\n      const data: any = await getCategoryById(id)\n      this.renderKey++\n      this.image = data.image\n      this.sketch = data.sketchImage\n      this.postForm = data\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  private setTagsViewTitle(title: string) {\n    const tagView = this.tempTagView\n    if (tagView) {\n      tagView.title = `${title}-${this.postForm.id}`\n      TagsViewModule.updateVisitedView(tagView)\n    }\n  }\n\n  private setPageTitle(title: string) {\n    document.title = `${title} - ${this.postForm.id}`\n  }\n\n  private submitForm() {\n    (this.$refs.postForm as Form).validate(valid => {\n      if (valid) {\n        this.saveForm()\n      } else {\n        console.error('Submit Error!')\n        return false\n      }\n    })\n  }\n\n  private resetForm() {\n    this.image = this.resetImage;\n    (this.$refs.postForm as Form).resetFields()\n    this.renderKey--\n    this.postForm.image = ''\n    // this.postForm.sketchImage = ''\n  }\n\n  @Action\n  public async saveForm() {\n    try {\n      \n      this.loading = true\n      if (this.isEdit) {\n        \n        await updateCategory(this.postForm.id, this.postForm)\n      } else {\n        await addCategory(this.postForm)\n      }\n\n      this.$notify({\n        title: 'Success',\n        message: 'Category saved successfully',\n        type: 'success',\n        duration: 2000\n      })\n      router.push('/category/list')\n    } catch (err) {\n      this.loading = false\n      this.$message(err.message)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n    border-bottom: 1px solid #bfcbd9;\n  }\n\n}\n\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n.avatar {\n  width: 400px;\n  height: 200px;\n  border-radius: 50%;\n  position: absolute;\n  transform-origin: 95% 40%;\n}\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n</style>\n"]}]}