{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/state/components/StateDetail.vue?vue&type=style&index=0&id=6abe50fe&lang=scss&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/state/components/StateDetail.vue","mtime":1668755880336},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hZG1pbi10ZXh0YXJlYSB7CiAgdGV4dGFyZWEgewogICAgcGFkZGluZy1yaWdodDogNDBweDsKICAgIHJlc2l6ZTogbm9uZTsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1yYWRpdXM6IDBweDsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYmZjYmQ5OwogIH0KfQo="},{"version":3,"sources":["StateDetail.vue"],"names":[],"mappings":";AA2MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StateDetail.vue","sourceRoot":"src/views/state/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        status-icon\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n      >\n        <!-- <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n        >\n          <el-switch v-model=\"postForm.enabled\" />\n        </el-form-item> -->\n\n        <el-form-item\n          label=\"State Name\"\n          prop=\"name\"\n          style=\"margin-bottom: 20px\"\n        >\n          <el-input\n            v-model=\"postForm.name\"\n            name=\"name\"\n            style=\"width: 68%\"\n            required\n            placeholder=\"State Name\"\n          />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button\n            v-loading=\"loading\"\n            v-waves\n            type=\"success\"\n            @click=\"submitForm\"\n          >\n            {{ $t(\"global.form.save\") }}\n          </el-button>\n          <el-button v-waves type=\"reset\" @click=\"resetForm\">\n            {{ $t(\"global.form.reset\") }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport {\n  defaultStateData,\n  addstate,\n  updatestate,\n  getstateById,\n} from \"@/api/state\";\nimport { AppModule } from \"@/store/modules/app\";\nimport { TagsViewModule, ITagView } from \"@/store/modules/tags-view\";\nimport { Form } from \"element-ui\";\nimport router from \"../../../router\";\nimport { Action } from \"vuex-module-decorators\";\n// import {arrangeLetters} from '@/utils/index'\n\n@Component({\n  name: \"ZipCodeDetail\",\n  components: {},\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n  private showImageUpload = false;\n  private params = { some_params: \"your_params_goes_here\" };\n  private postForm = Object.assign({}, defaultStateData);\n  private loading = false;\n\n  private rules = {\n    name: [\n      { required: true, message: \"Please enter State Name\", trigger: \"blur\" },\n      {\n        pattern: \"^[a-zA-Z0-9_]\",\n        message: \"Space not allow at start of name\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n  };\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language;\n  }\n\n  created() {\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id;\n      this.fetchData(parseInt(id));\n    } else {\n      this.postForm = Object.assign({}, defaultStateData);\n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route);\n  }\n\n  private async fetchData(id: number) {\n    try {\n      const data: any = await getstateById(id);\n      this.postForm = data;\n      // Just for test\n      //  const title = this.postForm.email\n      // Set tagsview title\n      //  this.setTagsViewTitle(title)\n      // Set page title\n      //  this.setPageTitle(title)\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  private setTagsViewTitle(title: string) {\n    const tagView = this.tempTagView;\n    if (tagView) {\n      tagView.title = `${title}-${this.postForm.id}`;\n      TagsViewModule.updateVisitedView(tagView);\n    }\n  }\n\n  private setPageTitle(title: string) {\n    document.title = `${title} - ${this.postForm.id}`;\n  }\n\n  private submitForm() {\n    (this.$refs.postForm as Form).validate((valid) => {\n      if (valid) {\n        this.saveForm();\n      } else {\n        console.error(\"Submit Error!\");\n        return false;\n      }\n    });\n  }\n\n  private resetForm() {\n    (this.$refs.postForm as Form).resetFields();\n  }\n\n  @Action\n  public async saveForm() {\n    try {\n      \n      this.loading = true;\n      // this.postForm.countryId =1;\n      // this.postForm.name=arrangeLetters(this.postForm.name);\n      if (this.isEdit) {\n        await updatestate(this.postForm.id, this.postForm).then((res: any) => {\n          this.$notify({\n            title: \"Success\",\n            message: \"State saved successfully\",\n            type: \"success\",\n            duration: 2000,\n          });\n          router.push(\"/state/list\");\n        });\n      } else {\n        \n        await addstate(this.postForm)\n          .then((res: any) => {\n            ;\n            // if (res.statusCode === 200) {\n              this.$notify({\n                title: \"Success\",\n                message: \"State saved successfully\",\n                type: \"success\",\n                duration: 2000,\n              });\n              router.push(\"/state/list\");\n            // }\n          })\n          // .catch((res: any) => {\n          //   if (res.statusCode === 500) {\n          //     this.loading = false;\n          //     this.$notify({\n          //       title: \"Warning\",\n          //       message: \"State name already exist.\",\n          //       type: \"warning\",\n          //       duration: 3000,\n          //     });\n          //   }\n          // });\n      }\n    } catch (err) {\n      this.loading = false;\n      // this.$message(err.message)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n    border-bottom: 1px solid #bfcbd9;\n  }\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n  .avatar {\n    width: 400px;\n    height: 200px;\n    border-radius: 50%;\n    position: absolute;\n    transform-origin: 95% 40%;\n  }\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n</style>\n"]}]}