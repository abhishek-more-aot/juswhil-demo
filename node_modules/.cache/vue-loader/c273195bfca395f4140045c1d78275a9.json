{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/category/list.vue?vue&type=style&index=0&id=bfc0c836&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/category/list.vue","mtime":1673590766796},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lZGl0LWlucHV0IHsKICBwYWRkaW5nLXJpZ2h0OiAxMDBweDsKfQoKLmNhbmNlbC1idG4gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICByaWdodDogMTVweDsKICB0b3A6IDEwcHg7Cn0K"},{"version":3,"sources":["list.vue"],"names":[],"mappings":";AAqjBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"list.vue","sourceRoot":"src/views/category","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input\n        v-model=\"listQuery.name\"\n        placeholder=\"Category Name\"\n        style=\"width: 160px\"\n        class=\"filter-item\"\n        clearable=\"true\"\n        @input=\"handleFilter\"\n      />\n      <!-- <el-select\n        v-model=\"listQuery.feature\"\n        placeholder=\"Feature\"\n        clearable\n        class=\"filter-item\"\n        style=\"width: 160px\"\n        @change=\"handleFilter\"\n      >\n        <el-option\n          v-for=\"item in visibilityOptions\"\n          :key=\"item.key\"\n          :label=\"item.value\"\n          :value=\"item.key\"\n        />\n      </el-select> -->\n      <el-select\n        v-model=\"listQuery.enabled\"\n        :placeholder=\"$t('admin.enabled')\"\n        clearable\n        class=\"filter-item\"\n        style=\"width: 160px\"\n        @change=\"handleFilter\"\n      >\n        <el-option\n          v-for=\"item in enableTypeOptions\"\n          :key=\"item.key\"\n          :label=\"item.value\"\n          :value=\"item.key\"\n        />\n      </el-select>\n      <el-select\n        v-model=\"listQuery.sort\"\n        style=\"width: 170px\"\n        class=\"filter-item\"\n        @change=\"handleFilter\"\n      >\n        <el-option\n          v-for=\"item in sortOptions\"\n          :key=\"item.key\"\n          :label=\"item.label\"\n          :value=\"item.key\"\n        />\n      </el-select>\n\n      <el-button\n        v-waves\n        class=\"filter-item\"\n        type=\"primary\"\n        style=\"background:#59b6e3;border:1px solid #59b6e3 \"\n        icon=\"el-icon-search\"\n        @click=\"handleFilter\"\n      >\n        {{ $t(\"table.search\") }}\n      </el-button>\n\n      <router-link\n        :to=\"'/category/add'\"\n        class=\"margin-horizontal\"\n      >\n        <el-button\n          v-waves\n          class=\"filter-item\"\n          type=\"primary\"\n          style=\"background:#59b6e3;border:1px solid #59b6e3\"\n          icon=\"el-icon-plus\"\n        >\n          Add Category\n        </el-button>\n      </router-link>\n      <el-checkbox\n        v-model=\"showSortingOption\"\n        class=\"filter-item\"\n        style=\"margin-left: 15px\"\n        @change=\"onPriortyChange()\"\n      >\n        Change Priority\n      </el-checkbox>\n      <el-checkbox\n        v-model=\"showCreatedDate\"\n        class=\"filter-item\"\n        style=\"margin-left: 15px\"\n        @change=\"tableKey = tableKey + 1\"\n      >\n        {{ $t(\"table.createdDate\") }}\n      </el-checkbox>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      ref=\"dragTable\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      row-key=\"id\"\n      highlight-current-row\n      style=\"width: 100%\"\n      @sort-change=\"sortChange\"\n    >\n      <el-table-column\n        sortable=\"custom\"\n        width=\"100\"\n        align=\"center\"\n        :label=\"$t('table.id')\"\n        prop=\"id\"\n        :class-name=\"getSortClass('id')\"\n      />\n      <el-table-column\n        width=\"130\"\n        align=\"center\"\n        label=\"Enable/Disable\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <enabled\n            :key=\"scope.row.id\"\n            v-model=\"scope.row.enabled\"\n            :url=\"'/categories/' + scope.row.id\"\n          />\n        </template>\n      </el-table-column>\n      <el-table-column\n        width=\"230\"\n        align=\"center\"\n        label=\"Category Name\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <router-link\n            style=\"color: red\"\n            :to=\"'/product/list/' + scope.row.id\"\n          >\n            <u>{{ scope.row.name }}</u>\n          </router-link>\n        </template>\n      </el-table-column>\n      <!-- <el-table-column\n        width=\"230\"\n        align=\"center\"\n        label=\"Price\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <div>{{ scope.row.price }}</div>\n        </template>\n      </el-table-column> -->\n\n      <el-table-column\n        width=\"300\"\n        align=\"center\"\n        label=\"Image\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <el-avatar\n            :src=\"scope.row.image\"\n            shape=\"square\"\n            :size=\"100\"\n          />\n        </template>\n      </el-table-column>\n\n      <!-- <el-table-column\n        width=\"250\"\n        align=\"center\"\n        label=\"Sketch\"\n        required\n        prop=\"sketchImage\"\n      >\n        <template slot-scope=\"scope\">\n          <el-avatar\n            :src=\"scope.row.sketchImage\"\n            shape=\"square\"\n            :size=\"100\"\n          />\n        </template>\n      </el-table-column> -->\n\n      <!-- <el-table-column\n        width=\"150\"\n        align=\"center\"\n        label=\"Feature\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <el-switch\n            v-model=\"scope.row.feature\"\n            @change=\"visibiltyUpdate(scope.row.id, scope.row.feature)\"\n          />\n        </template>\n      </el-table-column> -->\n\n      <el-table-column\n        align=\"center\"\n        :label=\"$t('table.actions')\"\n        width=\"150\"\n        class-name=\"fixed-width\"\n      >\n        <template slot-scope=\"scope\">\n          <router-link :to=\"'/category/edit/' + scope.row.id\">\n            <el-button\n              type=\"warning\"\n              size=\"small\"\n              icon=\"el-icon-edit\"\n            />\n          </router-link>&nbsp;\n          <el-button\n            class=\"filter-item\"\n            type=\"danger\"\n            size=\"small\"\n            icon=\"el-icon-delete\"\n            @click=\"handleIsDelete(scope.row)\"\n          />\n          <!-- <el-button\n            size=\"small\"\n            type=\"danger\"\n            icon=\"el-icon-delete\"\n            @click=\"handleDelete(scope.row)\"\n          /> -->\n        </template>\n      </el-table-column>\n      <el-table-column\n        v-if=\"showCreatedDate\"\n        :label=\"$t('table.createdDate')\"\n        width=\"150\"\n        align=\"center\"\n      >\n        <template slot-scope=\"scope\">\n          <span style=\"color: red\">{{\n            scope.row.createdTimestamp | moment(\"from\")\n          }}</span><br>\n          <span>( {{ scope.row.createdByFullName }} )</span>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination\n      v-show=\"total > 0 && !this.showSortingOption\"\n      :total=\"total\"\n      :page.sync=\"listQuery.page\"\n      :limit.sync=\"listQuery.limit\"\n      @pagination=\"getList\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator'\nimport {\n  getCategorys,\n  deleteCategory,\n  updateOrder,\n  updateCategory,\n  getCategoryById\n} from '@/api/category'\nimport { getAdminById } from '@/api/admins'\nimport { ICategoryData } from '@/api/types'\nimport Pagination from '@/components/Pagination/index.vue'\nimport { getQuery, formatJson } from '@/utils/index'\nimport { exportJson2Excel } from '@/utils/excel'\nimport Sortable from 'sortablejs'\nimport Enabled from '@/components/Enabled/index.vue'\n\n@Component({\n  name: 'CategoryList',\n  components: {\n    Pagination,\n    Enabled\n  }\n})\nexport default class extends Vue {\n  private tableKey = 0;\n  private total = 0;\n  private list: ICategoryData[] = [];\n  private listLoading = true;\n  private downloadLoading = false;\n  newList: any = [];\n  oldList: any = [];\n  private showSortingOption: boolean = false;\n  private renderComponent: boolean = true;\n\n  private listQuery = {\n    page: 1,\n    limit: 10,\n    isDeleted: false,\n    sort: 'id,ASC',\n    filter: {\n      enabled: 'eq',\n      name: '$contL',\n      isDeleted: 'eq'\n    }\n  };\n\n  private sortOptions = [\n    { label: 'Ascending', key: 'id,ASC' },\n    { label: 'Descending', key: 'id,DESC' }\n  ];\n\n  private visibilityOptions = [\n    { key: true, value: 'On' },\n    { key: false, value: 'Off' }\n  ];\n\n  private enableTypeOptions = [\n    { key: true, value: 'Enable' },\n    { key: false, value: 'Disabled' }\n  ];\n\n  sortable: any;\n\n  created() {\n    this.getList()\n  }\n\n  private async getList() {\n    try {\n      this.listLoading = true\n      const data: any = await getCategorys(getQuery(this.listQuery))\n      this.list = data.data\n      this.total = data.total\n      this.list.forEach(async(admin: any) => {\n        if (admin.createdBy) {\n          var user: any = await getAdminById(admin.createdBy)\n          if (user) {\n            admin.createdByFullName = user.fullName\n          } else {\n            admin.createdByFullName = 'Unknown'\n          }\n        } else {\n          admin.createdByFullName = 'Unknown'\n        }\n      })\n      this.listLoading = false\n    } catch (error) {\n      this.listLoading = false\n    }\n  }\n\n  private getSortClass(key: string) {\n    const sort = this.listQuery.sort\n    return sort === `${key},ASC`\n      ? 'ascending'\n      : sort === `${key},DESC`\n        ? 'descending'\n        : ''\n  }\n\n  private sortChange(data: any) {\n    const { prop, order } = data\n    if (prop) {\n      this.listQuery.sort =\n        `${prop},` + (order === 'ascending' ? 'ASC' : 'DESC')\n      this.handleFilter()\n    }\n  }\n\n  private async visibiltyUpdate(id: number, feature: any) {\n    const data: any = await getCategoryById(id)\n    data.feature = feature\n    updateCategory(id, data)\n  }\n\n  private async handleIsDelete(row:any) {\n    this.$confirm('This will permanently delete the file. Continue?', 'Warning', {\n      confirmButtonText: 'OK',\n      cancelButtonText: 'Cancel',\n      type: 'warning'\n    }).then(async() => {\n      const data: any = row\n      data.isDeleted = true\n      await updateCategory(row.id, data)\n      this.$message({\n        type: 'success',\n        message: 'Delete completed'\n      })\n      this.getList()\n    }).catch(() => {\n      this.$message({\n        type: 'info',\n        message: 'Delete canceled'\n      })\n    })\n    // const data: any = row\n    // data.isDeleted = true;\n    // await updateCategory(row.id, data);\n    // this.getList();\n  }\n\n  private handleFilter() {\n    this.listQuery.page = 1\n    this.getList()\n  }\n\n  private handleDelete(data: any) {\n    if (data) {\n      this.$confirm(\n        this.$tc('table.deleteConfirmation', undefined, { name: data.name }),\n        this.$tc('table.delete'),\n        {\n          confirmButtonText: this.$tc('table.delete'),\n          confirmButtonClass: 'el-button--danger',\n          cancelButtonText: 'Cancel',\n          type: 'error'\n        }\n      )\n        .then(() => {\n          deleteCategory(data.id).then((deleted) => {\n            this.getList()\n          })\n        })\n        .catch(() => {\n          this.$message({\n            type: 'info',\n            message: this.$tc('table.deleteCanceled')\n          })\n        })\n    }\n  }\n\n  private async getAllList() {\n    try {\n      this.listLoading = true\n      const data: any = await getCategorys(getQuery(this.listQuery))\n      this.list = data.data\n      this.total = data.total\n      this.listLoading = false\n    } catch (error) {\n      this.listLoading = false\n    }\n  }\n\n  async onPriortyChange() {\n    if (this.showSortingOption) {\n      this.fetchAllRecored(true)\n    } else {\n      this.renderComponent = false\n      this.sortable.options.disabled = true\n      this.$nextTick().then(() => {\n        this.renderComponent = true\n      })\n    }\n  }\n\n  async fetchAllRecored(checkForFirstTime: boolean) {\n    try {\n      this.listLoading = true\n      const data: any = await getCategorys(\n        getQuery({\n          page: 1,\n          limit: 100000,\n          sort: 'priority,ASC',\n          isDeleted: 'false',\n          filter: {\n            enabled: 'eq',\n            isDeleted: 'eq'\n          }\n        })\n      )\n      this.list = data.data\n      this.total = data.total\n      this.listLoading = false\n      if (checkForFirstTime) {\n        this.oldList = this.list.map((v) => v.id)\n        this.newList = this.oldList.slice()\n        this.$nextTick(this.setSort)\n      }\n    } catch (error) {\n      this.listLoading = false\n    }\n  }\n\n  setSort() {\n    const temp: any = this.$refs.dragTable\n    const el = temp.$el.querySelectorAll(\n      '.el-table__body-wrapper > table > tbody'\n    )[0]\n    this.sortable = Sortable.create(el, {\n      ghostClass: 'sortable-ghost',\n      setData: function(dataTransfer) {\n        dataTransfer.setData('Text', '')\n      },\n      onEnd: (evt) => {\n        const targetRow = this.list.splice(Number(evt.oldIndex), 1)[0]\n        this.list.splice(Number(evt.newIndex), 0, targetRow)\n        const tempIndex = this.newList.splice(evt.oldIndex, 1)[0]\n        this.newList.splice(evt.newIndex, 0, tempIndex)\n        console.log(this.newList)\n        this.updateOrder()\n      }\n    })\n  }\n\n  private async updateOrder() {\n    try {\n      const updateCheck = await updateOrder(this.newList)\n      this.fetchAllRecored(false)\n      // eslint-disable-next-line no-empty\n    } catch (error) {}\n  }\n\n  private async handleDownload(paid: boolean) {\n    this.downloadLoading = true\n    const fliterData: any = []\n    const page = this.listQuery.page\n    const limit = this.listQuery.limit\n    this.listQuery.page = 1\n    this.listQuery.limit = 100000\n\n    const dataAll: any = await getCategorys(getQuery(this.listQuery))\n    const listAll: ICategoryData[] = dataAll.data\n\n    this.listQuery.page = page\n    this.listQuery.limit = limit\n    // this.total = data.total;\n\n    // if (paid) {\n    //   fliterData = listAll.filter(list => {\n    //     return new Date(list.planExipiryDate) > new Date();\n    //   });\n    // } else {\n    //   fliterData = listAll.filter(list => {\n    //     return new Date(list.planExipiryDate) < new Date();\n    //   });\n    // }\n    const tHeader = [\n      'id',\n      'fullName',\n      'email',\n      'contactNumber',\n      'type',\n      'isMonthlyNewsletter',\n      'planExipiryDate'\n    ]\n    const filterVal = [\n      'id',\n      'fullName',\n      'email',\n      'contactNumber',\n      'type',\n      'isMonthlyNewsletter',\n      'planExipiryDate'\n    ]\n    const data = formatJson(filterVal, fliterData)\n    exportJson2Excel(\n      tHeader,\n      data,\n      this.$tc('route.userManagement.Category.title')\n    )\n    this.downloadLoading = false\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.edit-input {\n  padding-right: 100px;\n}\n\n.cancel-btn {\n  position: absolute;\n  right: 15px;\n  top: 10px;\n}\n</style>\n"]}]}