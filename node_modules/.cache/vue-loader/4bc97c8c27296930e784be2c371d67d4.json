{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/user/components/UserDetail.vue?vue&type=style&index=0&id=3f07a28b&lang=scss&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/user/components/UserDetail.vue","mtime":1668755897094},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hZG1pbi10ZXh0YXJlYSB7CiAgdGV4dGFyZWEgewogICAgcGFkZGluZy1yaWdodDogNDBweDsKICAgIHJlc2l6ZTogbm9uZTsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1yYWRpdXM6IDBweDsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkdGV4dEFyZWFCb3R0b207CiAgfQp9Cg=="},{"version":3,"sources":["UserDetail.vue"],"names":[],"mappings":";AAidA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserDetail.vue","sourceRoot":"src/views/user/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n      >\n        <!-- <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n        >\n          <el-switch v-model=\"postForm.enabled\" />\n        </el-form-item> -->\n        <el-form-item style=\"margin-bottom: 20px\" label=\"Name\" prop=\"fullName\">\n          <el-input\n            v-model=\"postForm.fullName\"\n            name=\"fullName\"\n            required\n            maxlength=\"30\"\n            style=\"width: 50%\"\n            placeholder=\"Name\"\n          />\n        </el-form-item>\n\n        <el-form-item style=\"margin-bottom: 20px\" label=\"User Type\" prop=\"userType\">\n          <el-select\n            v-model=\"postForm.status\"\n            clearable\n            name=\"userType\"\n            style=\"width: 50%\"\n            placeholder=\"Select\"\n          >\n            <el-option\n              v-for=\"item in userList\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :value=\"item.value\"\n            />\n          </el-select>\n        </el-form-item>\n\n        <el-form-item style=\"margin-bottom: 20px\" label=\"Company name\" prop=\"companyName\">\n          <el-input\n            v-model=\"postForm.companyName\"\n            name=\"companyName\"\n            required\n            style=\"width: 50%\"\n            placeholder=\"Company name\"\n          />\n        </el-form-item>\n\n        <el-form-item\n          v-if=\"!isEdit\"\n          style=\"margin-bottom: 20px\"\n          label=\"Contact Number\"\n          prop=\"contactNumber\"\n        >\n          <el-input\n            v-model=\"postForm.contactNumber\"\n            name=\"contactNumber\"\n            required\n            style=\"width: 50%\"\n            placeholder=\"Contact Number\"\n          />\n        </el-form-item>\n        <el-form-item style=\"margin-bottom: 20px\" label=\"Email\" prop=\"email\">\n          <el-input\n            v-model=\"postForm.email\"\n            name=\"email\"\n            required\n            style=\"width: 50%\"\n            placeholder=\"Email\"\n          />\n        </el-form-item>\n          <el-form-item style=\"margin-bottom: 20px\" label=\"State\" prop=\"stateId\">\n          <el-select\n            v-model=\"postForm.stateId\"\n            clearable\n            name=\"userType\"\n            style=\"width: 50%\"\n            placeholder=\"Select\"\n            @change=\"getCities(postForm.stateId)\"\n          >\n            <el-option\n              v-for=\"item in stateList\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            />\n          </el-select>\n        </el-form-item>\n          <el-form-item style=\"margin-bottom: 20px\" label=\"City\" prop=\"cityId\">\n          <el-select\n            v-model=\"postForm.cityId\"\n            clearable\n            name=\"userType\"\n            style=\"width: 50%\"\n            placeholder=\"Select\"\n          >\n            <el-option\n              v-for=\"item in cityList\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            />\n          </el-select>\n        </el-form-item>\n         <el-form-item style=\"margin-bottom: 20px\" label=\"Address\" prop=\"address\">\n          <el-input\n            v-model=\"postForm.address\"\n            name=\"address\"\n            required\n            type=\"textarea\"\n            rows=\"2\"\n            style=\"width: 50%\"\n            placeholder=\"address\"\n          />\n        </el-form-item>\n\n        <el-form-item style=\"margin-bottom: 20px\" label=\"Pincode\" prop=\"pincode\">\n          <el-input\n            v-model=\"postForm.pincode\"\n            name=\"pincode\"\n            required\n            style=\"width: 50%\"\n            placeholder=\"Pincode\"\n          />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button v-loading=\"loading\" v-waves type=\"success\" @click=\"submitForm\">\n            {{ $t(\"global.form.save\") }}\n          </el-button>\n          <el-button v-if=\"!isEdit\" v-waves type=\"reset\" @click=\"resetForm\">\n            {{ $t(\"global.form.reset\") }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport { isValidURL } from \"@/utils/validate\";\nimport { getAdminById, defaultAdminData, updateAdmin, register } from \"@/api/admins\";\nimport { AppModule } from \"@/store/modules/app\";\nimport { TagsViewModule, ITagView } from \"@/store/modules/tags-view\";\nimport { Form } from \"element-ui\";\nimport router from \"./../../../router\";\nimport { Action } from \"vuex-module-decorators\";\nimport { getAdminsRoles } from \"@/api/adminsRoles\";\nimport { getQuery } from \"../../../utils\";\nimport { defaultUsersData, updateUser, addUser, getUserById } from \"@/api/users\";\nimport PanThumb from \"@/components/PanThumb/index.vue\";\nimport AvatarUpload from \"@/components/AvatarUpload/index.vue\";\nimport { uploadFile } from \"@/api/common\";\nimport {\n \n  getstate,\n  \n} from \"@/api/state\";\nimport {\n  \n  getcities,\n  \n} from \"@/api/cities\";\n@Component({\n  name: \"TypeDetail\",\n  components: {\n    PanThumb,\n    AvatarUpload,\n  },\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n  private redirectionType: any = [\n    {\n      id: \"0\",\n      name: \"Link\",\n    },\n    {\n      id: \"1\",\n      name: \"Contact Page\",\n    },\n    {\n      id: \"2\",\n      name: \"About Page\",\n    },\n  ];\n\n  private postForm = Object.assign({}, defaultUsersData);\n  private loading = false;\n  private showImageUpload = false;\n  private image = \"https://via.placeholder.com/154\";\n  private toggleShow() {\n    this.showImageUpload = !this.showImageUpload;\n  }\n\n  private onCropUploadSuccess(jsonData: any, field: string) {\n    this.showImageUpload = false;\n    this.image = jsonData.files[field];\n  }\n\n  private onClose() {\n    this.showImageUpload = false;\n  }\n  private stateList:any =[];\n  private cityList:any =[]\n  private async getState(){\n   let data:any= await getstate(getQuery({\n    page: 1,\n    limit: 1000,\n    sort: \"id,DESC\",\n    enabled:true,\n    filter: {\n      name: \"$contL\",\n      enabled: \"eq\",\n    },\n   }))\n   this.stateList= data.data\n  }\n   private async getCities(stateId:number){\n   this.cityList = [];\n   let data:any= await getcities(getQuery({\n    page: 1,\n    limit: 1000,\n    sort: \"id,DESC\",\n    stateId:stateId,\n    enabled:true,\n    filter: {\n      \n      stateId:'eq',\n      enabled: \"eq\",\n    },\n   }))\n   this.cityList= data.data;\n  \n  }\n\n  private rules = {\n    fullName: [\n      {\n        required: true,\n        message: \"Please enter full name\",\n        trigger: [\"blur\", \"change\"],\n      },\n      { min: 3, message: \"Length should be greater than 3\", trigger: [\"blur\", \"change\"] },\n      {\n        pattern: \"^[a-zA-Z ]*$\",\n        message: \"Name should contain characters only\",\n        trigger: [\"blur\", \"change\"],\n      },\n      {\n        pattern: '^[a-zA-Z]{4,}(?: [a-zA-Z]+)?(?: [a-zA-Z]+)?$',\n        message: 'Spaces are not allowed',\n        trigger: ['blur', 'change']\n      }\n    ],\n    pincode: [\n      {\n        required: true,\n        message: \"Please enter pincode\",\n        trigger: [\"blur\", \"change\"],\n      },\n      { \n        trigger: [\"blur\", \"change\"],\n        pattern: \"^[0-9]*$\",\n        message: \"Please enter correct pincode\",\n        \n      }\n    ],\n    companyName: [\n      {\n        required: true,\n        message: \"Please enter compnay name\",\n        trigger: [\"blur\", \"change\"],\n      },\n      // {\n      //   pattern: '^[a-zA-Z ]*$',\n      //   message: 'Name should contain characters only',\n      //   trigger: ['blur', 'change']\n      // }\n    ],\n    email: [\n      // {\n      //   required: true,\n      //   message: 'Please enter email',\n      //   trigger: 'blur'\n      // },\n      {\n        type: \"email\",\n        message: \"Please enter correct email\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n\n    contactNumber: [\n      {\n        required: true,\n        message: \"Please enter contact number\",\n        trigger: \"blur\",\n      },\n      {\n        trigger: [\"blur\", \"change\"],\n        pattern: \"(^[0-9]*$)\",\n        message: \"Contact number should contain number only\",\n      },\n      {\n        max: 10,\n        min: 10,\n        message: \"Length should be of 10 Digits\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n  };\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language;\n  }\n\n  private userList = [\n    { label: \"User\", value: 1 },\n    { label: \"CNF\", value: 2 },\n    { label: \"Super Stockist\", value: 3 },\n    { label: \"CD\", value: 4 },\n    { label: \"SD\", value: 5 },\n    { label: \"WB\", value: 6 },\n    { label: \"MRP\", value: 7 },\n    { label: \"COP\", value: 8 },\n    { label: \"SOP\", value: 9 },\n  ];\n  private stateId:any;\n  created() {\n    this.getState();\n    this.getCities(this.stateId);\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id;\n      this.fetchData(parseInt(id));\n    } else {\n      this.postForm = Object.assign({}, defaultUsersData);\n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route);\n  }\n\n  private async fetchData(id: number) {\n    try {\n      const data: any = await getUserById(id);\n      this.postForm = data;\n      this.image = data.image;\n      this.postForm.pincode = data.pincode.toString();\n    } catch (err) {\n      Promise.reject(err);\n    }\n  }\n\n  private setTagsViewTitle(title: string) {\n    const tagView = this.tempTagView;\n    if (tagView) {\n      tagView.title = `${title}-${this.postForm.id}`;\n      TagsViewModule.updateVisitedView(tagView);\n    }\n  }\n\n  private setPageTitle(title: string) {\n    document.title = `${title} - ${this.postForm.id}`;\n  }\n\n  private submitForm() {\n    (this.$refs.postForm as Form).validate((valid) => {\n      if (valid) {\n        this.saveForm();\n      } else {\n        return false;\n      }\n    });\n  }\n\n  private resetForm() {\n    (this.$refs.postForm as Form).resetFields();\n    this.image = \"https://via.placeholder.com/154\";\n  }\n\n  @Action\n  public async saveForm() {\n    try {\n      //  this.postForm.countryId=1;\n      // this.postForm.pincode = Number(this.postForm.pincode);\n      // if (this.postForm.pincode == 0) {\n      //   this.postForm.pincode = null;\n      // }\n      this.loading = true;\n      if (this.isEdit) {\n        this.postForm.state=({id:this.postForm.stateId})\n         this.postForm.city=({id:this.postForm.cityId})\n\n        await updateUser(this.postForm.id, this.postForm);\n        this.$notify({\n          title: \"Success\",\n          message: \"Data saved successfully\",\n          type: \"success\",\n          duration: 2000,\n        });\n        router.push(\"/user/list\");\n      } else {\n        await addUser(this.postForm).then((res: any) => {\n          if (res.responseCode === 200) {\n            this.loading = false;\n            this.$notify({\n              title: \"Success\",\n              message: \"Data saved successfully\",\n              type: \"success\",\n              duration: 2000,\n            });\n            router.push(\"/user/list\");\n          } else {\n            this.$message.error(\"Oops, this is a error message.\");\n            this.loading = false;\n          }\n        });\n      }\n    } catch (err) {\n      this.loading = false;\n    }\n  }\n\n  // private imageUpload(file: any) {\n  //   this.postForm.image = file.response\n  // }\n\n  // private sendToAllToggled() {\n  //   if (this.postForm.sendToAll) {\n  //     this.$confirm(\n  //       'Are you sure want to send notification to All users?',\n  //       'Attention!',\n  //       {\n  //         confirmButtonText: \"Yes, I know what I'm doing\",\n  //         confirmButtonClass: 'el-button--success',\n  //         cancelButtonText: this.$tc('table.cancel'),\n  //         cancelButtonClass: 'el-button--danger',\n  //         type: 'error'\n  //       }\n  //     )\n  //       .then(confirm => {\n  //         // let it confirm\n  //         // clear other dropdowns\n  //       })\n  //       .catch(_ => {\n  //         this.postForm.sendToAll = false\n  //       })\n  //   }\n  // }\n}\n</script>\n<style lang=\"scss\">\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n    border-bottom: 1px solid $textAreaBottom;\n  }\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n</style>\n"]}]}