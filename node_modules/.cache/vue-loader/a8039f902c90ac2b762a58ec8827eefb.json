{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/product/list.vue?vue&type=style&index=0&id=1c9f8fd8&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/product/list.vue","mtime":1672828598457},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lZGl0LWlucHV0IHsKICBwYWRkaW5nLXJpZ2h0OiAxMDBweDsKfQoKLmNhbmNlbC1idG4gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICByaWdodDogMTVweDsKICB0b3A6IDEwcHg7Cn0K"},{"version":3,"sources":["list.vue"],"names":[],"mappings":";AAinBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"list.vue","sourceRoot":"src/views/product","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input\n        v-model=\"listQuery.name\"\n        placeholder=\"Name\"\n        clearable\n        class=\"filter-item\"\n        style=\"width: 160px\"\n        @input=\"handleFilter\"\n      />\n     \n      <!-- <el-select\n        v-model=\"listQuery.new\"\n        style=\"width: 140px\"\n        class=\"filter-item\"\n        placeholder=\"New\"\n        clearable=\"true\"\n        @change=\"handleFilter\"\n      >\n        <el-option\n          v-for=\"item in newOption\"\n          :key=\"item.key\"\n          :label=\"item.label\"\n          :value=\"item.key\"\n        />\n      </el-select> -->\n      <el-select\n        v-model=\"listQuery.sort\"\n        style=\"width: 140px\"\n        class=\"filter-item\"\n        @change=\"handleFilter\"\n      >\n        <el-option\n          v-for=\"item in sortOptions\"\n          :key=\"item.key\"\n          :label=\"item.label\"\n          :value=\"item.key\"\n        />\n      </el-select>\n      <el-button\n        v-waves\n        class=\"filter-item\"\n        type=\"primary\"\n        style=\"background:#59b6e3;border:1px solid #59b6e3 \"\n        icon=\"el-icon-search\"\n        @click=\"handleFilter\"\n      >\n        {{ $t(\"table.search\") }}\n      </el-button>\n\n      <router-link\n        v-if=\"listQuery.subCategoryId\"\n        :to=\"'/product/add/' + this.listQuery.categoriesId\"\n        class=\"margin-horizontal\"\n      >\n        <el-button\n          v-waves\n          class=\"filter-item\"\n          type=\"primary\"\n          icon=\"el-icon-plus\"\n        >\n          Add Product\n        </el-button>\n      </router-link>\n      <router-link\n        v-else\n        :to=\"'/product/add/' + this.listQuery.categoriesId\"\n        class=\"margin-horizontal\"\n      >\n        <el-button\n          v-waves\n          class=\"filter-item\"\n          type=\"primary\"\n          style=\"background:#59b6e3;border:1px solid #59b6e3 \"\n          icon=\"el-icon-plus\"\n        >\n          Add Product\n        </el-button>\n      </router-link>\n      <el-button\n        v-waves\n        :loading=\"downloadLoading\"\n        class=\"filter-item\"\n        type=\"primary\"\n        style=\"background:#59b6e3;border:1px solid #59b6e3 \"\n        icon=\"el-icon-download\"\n        @click=\"handleDownload\"\n      >{{ $t('table.export') }}</el-button>\n       <el-checkbox\n        v-model=\"showCreatedDate\"\n        class=\"filter-item\"\n        style=\"margin-left: 15px\"\n        @change=\"tableKey = tableKey + 1\"\n      >\n        {{ $t(\"table.createdDate\") }}\n      </el-checkbox>\n     \n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      ref=\"dragTable\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      row-key=\"id\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%\"\n       @selection-change=\"handleSelectionChange\"\n      @sort-change=\"sortChange\"\n    >\n   \n      <el-table-column\n        width=\"100\"\n        align=\"center\"\n        label=\"In-Stock\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <el-switch v-model=\"scope.row.inStock\" @change=\"stockUpdate(scope.row)\"/>\n        </template>\n      </el-table-column>\n      <el-table-column\n        sortable=\"custom\"\n        width=\"70px\"\n        align=\"center\"\n        :label=\"$t('table.id')\"\n        prop=\"id\"\n        :class-name=\"getSortClass('id')\"\n      />\n      <el-table-column\n        width=\"90\"\n        align=\"center\"\n        label=\"Enable/Disable\"\n        prop=\"\"\n      >\n        <template slot-scope=\"scope\">\n          <enabled\n            :key=\"scope.row.id\"\n            v-model=\"scope.row.enabled\"\n            :url=\"'/products/' + scope.row.id\"\n          />\n        </template>\n      </el-table-column>\n      <el-table-column\n        align=\"center\"\n        label=\"Product Details\"\n        width=\"400\"\n      >\n        <template slot-scope=\"scope\">\n          <viewer>\n          <el-avatar\n            :size=\"90\"\n            :src=\"scope.row.image\"\n            fit=\"fill\"\n            shape=\"square\"\n          />\n          </viewer>\n          <br>\n          <el-badge v-if=\"scope.row.new == false\">\n            {{ scope.row.name }}\n          </el-badge><br>\n          <el-badge\n            v-if=\"scope.row.new == true\"\n            value=\"new\"\n            class=\"item\"\n          >\n            {{ scope.row.name }}\n          </el-badge><br>\n          {{ scope.row.description }}<br>\n          {{ scope.row.categories.name }}<br>\n          <span v-if=\"scope.row.subCategory\">↳{{ scope.row.subCategory.name }}</span>\n          <span>Model Number: </span><span>{{ scope.row.modelNumber}}</span>\n          <!-- <el-rate\n            v-model=\"scope.row.rating\"\n            disabled=\"true/\"\n          /> -->\n        </template>\n      </el-table-column>\n\n      <!-- <el-table-column\n        align=\"left\"\n        label=\"Category\"\n        width=\"230\"\n      >\n        <template slot-scope=\"scope\">\n          {{ scope.row.categories.name }}<br>\n          <span v-if=\"scope.row.subCategory\">↳{{ scope.row.subCategory.name }}</span>\n        </template>\n      </el-table-column> -->\n\n    \n\n      <el-table-column\n        align=\"center\"\n        label=\"Product Images\"\n        width=\"230\"\n      >\n        <template slot-scope=\"scope\">\n          <viewer>\n            <img\n              v-for=\"src in scope.row.productImages\"\n              :key=\"src\"\n              style=\"margin-left:5px\"\n              height=\"100px\"\n              width=\"80px\"\n              :src=\"src\"\n            >\n          </viewer>\n        </template>\n      </el-table-column>\n      <el-table-column\n        v-if=\"video\"\n        align=\"center\"\n        label=\"Video\"\n        width=\"250px\"\n      >\n        <template slot-scope=\"scope\">\n          {{ scope.row.video }}\n        </template>\n      </el-table-column>\n\n      <el-table-column\n        v-if=\"showCreatedDate\"\n        :label=\"$t('table.createdDate')\"\n        align=\"center\"\n      >\n        <template slot-scope=\"scope\">\n          <span style=\"color: red\">{{\n            scope.row.createdTimestamp | moment(\"from\")\n          }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        \n        align=\"center\"\n        :label=\"$t('table.actions')\"\n        width=\"180\"\n      >\n        <template slot-scope=\"scope\">\n          <!-- <el-button\n            v-waves\n            type=\"primary\"\n            size=\"small\"\n            @click=\"duplicate(scope.row.id)\"\n          >\n            Duplicate\n          </el-button><br><br> -->\n          <!-- <router-link :to=\"'/product/options/' + scope.row.id\">\n            <el-button\n              v-waves\n              type=\"primary\"\n               style=\"background:#59b6e3;border:1px solid #59b6e3\"\n              size=\"small\"\n            >\n              Options\n            </el-button>\n          </router-link><br><br> -->\n          <router-link :to=\"'/product/edit/' + scope.row.id\">\n            <el-button\n              v-waves\n              type=\"warning\"\n              size=\"small\"\n              icon=\"el-icon-edit\"\n            />\n          </router-link>\n          <el-button\n            v-if=\"myRole =='superadmin'\"\n            style=\"margin-left: 10px\"\n            class=\"filter-item\"\n            type=\"danger\"\n            size=\"small\"\n            icon=\"el-icon-delete\"\n            @click=\"handleIsDelete(scope.row)\"\n          />\n\n          <!-- <el-button\n            size=\"small\"\n            type=\"danger\"\n            icon=\"el-icon-delete\"\n            @click=\"handleDelete(scope.row)\"\n          /> -->\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination\n      v-show=\"total > 0\"\n      :total=\"total\"\n      :page.sync=\"listQuery.page\"\n      :limit.sync=\"listQuery.limit\"\n      @pagination=\"getList\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator'\nimport { IProductData } from '@/api/types'\nimport Pagination from '@/components/Pagination/index.vue'\nimport { exportJson2Excel } from '@/utils/excel'\nimport { formatJson, getQuery } from '@/utils'\nimport Enabled from '@/components/Enabled/index.vue'\nimport Featured from '@/components/Featured/index.vue'\nimport {\n  addProduct,\n  deleteProduct,\n  duplicateProduct,\n  getProducts,\n  updateOrder,\n  getProductById,\n  updateProduct\n} from '@/api/product'\nimport { AdminModule } from '@/store/modules/admin'\nimport Sortable from 'sortablejs'\nimport Viewer from 'v-viewer'\nimport 'viewerjs/dist/viewer.css'\n\n@Component({\n  name: 'TypeList',\n  components: {\n    Pagination,\n    Enabled\n    // PanThumb\n  }\n})\nexport default class extends Vue {\n  private tableKey = 0;\n  private total = 0;\n  private list: IProductData[] = [];\n  private myRole = AdminModule.roles;\n  private listLoading = true;\n  newList: any = [];\n  oldList: any = [];\n  private showSortingOption: boolean = false;\n  private renderComponent: boolean = true;\n  sortable: any;\n  private downloadLoading = false;\n  private listQuery = parseInt(this.$route.params && this.$route.params.subCategoryId) ? {\n    page: 1,\n    limit: 20,\n    sort: 'priority,ASC',\n    categoriesId: 0,\n    subCategoryId: 0,\n    isDeleted: false,\n    filter: {\n      enabled: 'eq',\n      name: '$contL',\n      subCategoryId: 'eq',\n      categoriesId: 'eq',\n      modelNumber: '$contL',\n      new: 'eq',\n      isDeleted: 'eq'\n    }\n  } : {\n    page: 1,\n    limit: 20,\n    sort: 'priority,ASC',\n    categoriesId: 0,\n    isDeleted: false,\n    filter: {\n      enabled: 'eq',\n      name: '$contL',\n      categoriesId: 'eq',\n      modelNumber: '$contL',\n      new: 'eq',\n      isDeleted: 'eq'\n    }\n  }\n\n  private showCreatedDate: boolean = false;\n  private sortOptions = [\n    { label: 'Ascending', key: 'priority,ASC' },\n    { label: 'Descending', key: 'priority,DESC' }\n  ];\n\n  private enableTypeOptions = [\n    { key: true, value: 'Enable' },\n    { key: false, value: 'Disabled' }\n  ];\n\n  private newOption = [\n    { label: 'Yes', key: true },\n    { label: 'No', key: false }\n  ];\n\n  private ratingList = [\n    { label: '1 ★', key: 1 },\n    { label: '2 ★★', key: 2 },\n    { label: '3 ★★★', key: 3 },\n    { label: '4 ★★★★', key: 4 },\n    { label: '5 ★★★★★', key: 5 }\n  ];\n\n  private filters: any = [];\n\n  created() {\n    this.listQuery.categoriesId = parseInt(\n      this.$route.params && this.$route.params.categoriesId\n    )\n    if (parseInt(this.$route.params && this.$route.params.subCategoryId)) {\n      this.listQuery.subCategoryId = parseInt(this.$route.params && this.$route.params.subCategoryId)\n    }\n    this.getList()\n  }\n\n  private async getList() {\n    try {\n      this.listLoading = true\n      const data: any = await getProducts(getQuery(this.listQuery))\n      this.list = data.data\n      this.total = data.total\n      this.listLoading = false\n    } catch (error) {\n      this.listLoading = false\n    }\n  }\n  private alldata:any=[];\n  private  demo1:any = [];\n  private handleSelectionChange(val:any){\n    debugger;\n    \n    this.alldata = val;\n      this.alldata.forEach((val:any) => {\n       this.demo1.push(val.id)\n     });\n\n  }\n\n  private async duplicate(productId: number) {\n    const data = {\n      id: productId\n    }\n    await duplicateProduct(data)\n    this.getList()\n  }\n\n  private async stockUpdate(data:any){\n    const res:any = await updateProduct(data.id,data)\n  }\n\n  private async handleIsDelete(row: any) {\n    this.$confirm(\n      'This will permanently delete the file. Continue?',\n      'Warning',\n      {\n        confirmButtonText: 'OK',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }\n    )\n      .then(async() => {\n        \n        const data: any = row\n        data.isDeleted = true\n        await updateProduct(row.id, data)\n        this.$message({\n          type: 'success',\n          message: 'Delete completed'\n        })\n        this.getList()\n      })\n      .catch(() => {\n        this.$message({\n          type: 'info',\n          message: 'Delete canceled'\n        })\n      })\n    // const data: any = row\n    // data.isDeleted = true;\n    // await updateProduct(row.id, data);\n    // this.getList()\n  }\n\n  private handleFilter() {\n    this.listQuery.page = 1\n    this.getList()\n  }\n\n  async onPriortyChange() {\n    if (this.showSortingOption) {\n      this.fetchAllRecored(true)\n    } else {\n      this.renderComponent = false\n      this.sortable.options.disabled = true\n      this.$nextTick().then(() => {\n        this.renderComponent = true\n      })\n    }\n  }\n\n  async fetchAllRecored(checkForFirstTime: boolean) {\n    try {\n      this.listLoading = true\n      \n      const data: any = await getProducts(\n        getQuery({\n          page: 1,\n          limit: 100000,\n          categoriesId: this.listQuery.categoriesId,\n          sort: 'priority,ASC',\n          isDeleted: 'false',\n          filter: {\n            enabled: 'eq',\n            isDeleted: 'eq',\n            categoriesId: 'eq'\n\n          }\n        })\n      )\n      this.list = data.data\n      this.total = data.total\n      this.listLoading = false\n      if (checkForFirstTime) {\n        this.oldList = this.list.map((v) => v.id)\n        this.newList = this.oldList.slice()\n        this.$nextTick(this.setSort)\n      }\n    } catch (error) {\n      this.listLoading = false\n    }\n  }\n\n  setSort() {\n    const temp: any = this.$refs.dragTable\n    const el = temp.$el.querySelectorAll(\n      '.el-table__body-wrapper > table > tbody'\n    )[0]\n    this.sortable = Sortable.create(el, {\n      ghostClass: 'sortable-ghost',\n      setData: function(dataTransfer) {\n        dataTransfer.setData('Text', '')\n      },\n      onEnd: (evt) => {\n        const targetRow = this.list.splice(Number(evt.oldIndex), 1)[0]\n        this.list.splice(Number(evt.newIndex), 0, targetRow)\n        const tempIndex = this.newList.splice(evt.oldIndex, 1)[0]\n        this.newList.splice(evt.newIndex, 0, tempIndex)\n        console.log(this.newList)\n        this.updateOrder()\n      }\n    })\n  }\n\n private async updateOrder() {\n    try {\n      const updateCheck = await updateOrder(this.newList)\n      this.fetchAllRecored(false)\n      // eslint-disable-next-line no-empty\n    } catch (error) {}\n  }\n\n  private handleDelete(data: any) {\n    if (data) {\n      this.$confirm(\n        this.$tc('table.deleteConfirmation', undefined, { name: data.name }),\n        this.$tc('table.delete'),\n        {\n          confirmButtonText: this.$tc('table.delete'),\n          confirmButtonClass: 'el-button--danger',\n          cancelButtonText: 'Cancel',\n          type: 'error'\n        }\n      )\n        .then(() => {\n          deleteProduct(data.id).then((deleted) => {\n            this.getList()\n          })\n        })\n        .catch(() => {\n          this.$message({\n            type: 'info',\n            message: this.$tc('table.deleteCanceled')\n          })\n        })\n    }\n  }\n\n  private sortChange(data: any) {\n    const { prop, order } = data\n    if (prop) {\n      this.listQuery.sort =\n        `${prop},` + (order === 'ascending' ? 'ASC' : 'DESC')\n      this.handleFilter()\n    }\n  }\n\n  private getSortClass(key: string) {\n    const sort = this.listQuery.sort\n    return sort === `${key},ASC`\n      ? 'ascending'\n      : sort === `${key},DESC`\n        ? 'descending'\n        : ''\n  }\n   \n private data1:any =[];\n  \n  private async handleDownload() {\n    \n    this.downloadLoading = true;\n\n    //  let data1:any = await getProducts(getQuery(this.listQuery1))\n    const tHeader = [\n      'ID',\n      'Product Name',\n      'Timestamp',\n      'Mrp Price'\n    ]\n    const filterVal = [\n      'id',\n      'name',\n      'createdTimestamp',\n      'mrpPrice'\n    ]\n    const data = formatJson(filterVal, this.list)\n    exportJson2Excel(tHeader, data, this.$tc('route.Products.title'))\n    this.downloadLoading = false\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.edit-input {\n  padding-right: 100px;\n}\n\n.cancel-btn {\n  position: absolute;\n  right: 15px;\n  top: 10px;\n}\n</style>\n"]}]}