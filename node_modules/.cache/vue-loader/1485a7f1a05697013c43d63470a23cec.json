{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/components/Breadcrumb/index.vue?vue&type=style&index=0&id=b50ef614&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/components/Breadcrumb/index.vue","mtime":1673513333799},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lbC1icmVhZGNydW1iX19pbm5lciwKLmVsLWJyZWFkY3J1bWJfX2lubmVyIGEgewogIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDsKICAvLyBjb2xvcjogIzAwMDsKICBjb2xvcjogI2ZmZjsKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICAvLyBiYWNrZ3JvdW5kOiAjZmZmOwogIHBhZGRpbmc6IDJweDsKfQoKLmFwcC1icmVhZGNydW1iLmVsLWJyZWFkY3J1bWIgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBmb250LXNpemU6IDE0cHg7CiAgbGluZS1oZWlnaHQ6IDUwcHg7CiAgbWFyZ2luLWxlZnQ6IDhweDsKCiAgLm5vLXJlZGlyZWN0IHsKICAgIGNvbG9yOiAjOTdhOGJlOwogICAgY3Vyc29yOiB0ZXh0OwogIH0KfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/Breadcrumb","sourcesContent":["<template>\n  <el-breadcrumb class=\"app-breadcrumb\" separator=\"/\">\n    <transition-group name=\"breadcrumb\">\n      <el-breadcrumb-item v-for=\"(item, index) in breadcrumbs\" :key=\"item.path\">\n        <span\n          v-if=\"\n            item.redirect === 'noredirect' || index === breadcrumbs.length - 1\n          \"\n          class=\"no-redirect\"\n          >{{ $t(\"route.\" + item.meta.title) }}</span\n        >\n        <a v-else @click.prevent=\"handleLink(item)\">{{\n          $t(\"route.\" + item.meta.title)\n        }}</a>\n      </el-breadcrumb-item>\n    </transition-group>\n  </el-breadcrumb>\n</template>\n\n<script lang=\"ts\">\nimport pathToRegexp from \"path-to-regexp\";\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { RouteRecord, Route } from \"vue-router\";\n\n@Component({\n  name: \"Breadcrumb\",\n})\nexport default class extends Vue {\n  private breadcrumbs: RouteRecord[] = [];\n\n  @Watch(\"$route\")\n  private onRouteChange(route: Route) {\n    // if you go to the redirect page, do not update the breadcrumbs\n    if (route.path.startsWith(\"/redirect/\")) {\n      return;\n    }\n    this.getBreadcrumb();\n  }\n\n  created() {\n    this.getBreadcrumb();\n  }\n\n  private getBreadcrumb() {\n    let matched = this.$route.matched.filter(\n      (item) => item.meta && item.meta.title\n    );\n    var reg: any = \"\";\n    const first = matched[0];\n    if (!this.isDashboard(first)) {\n      matched = [\n        {\n          path: \"/dashboard\",\n          meta: { title: \"dashboard\" },\n          regex: reg,\n          components: reg,\n          instances: reg,\n          props: \"\",\n        } as RouteRecord,\n      ].concat(matched);\n    }\n    this.breadcrumbs = matched.filter((item) => {\n      return item.meta && item.meta.title && item.meta.breadcrumb !== false;\n    });\n  }\n  private isDashboard(route: RouteRecord) {\n    const name = route && route.name;\n    if (!name) {\n      return false;\n    }\n    return name.trim().toLocaleLowerCase() === \"Dashboard\".toLocaleLowerCase();\n  }\n\n  private pathCompile(path: string) {\n    // To solve this problem https://github.com/PanJiaChen/vue-element-admin/issues/561\n    const { params } = this.$route;\n    const toPath = pathToRegexp.compile(path);\n    return toPath(params);\n  }\n\n  private handleLink(item: any) {\n    const { redirect, path } = item;\n    if (redirect) {\n      this.$router.push(redirect);\n      return;\n    }\n    this.$router.push(this.pathCompile(path));\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.el-breadcrumb__inner,\n.el-breadcrumb__inner a {\n  font-weight: 400 !important;\n  // color: #000;\n  color: #fff;\n  background: transparent;\n  // background: #fff;\n  padding: 2px;\n}\n\n.app-breadcrumb.el-breadcrumb {\n  display: inline-block;\n  font-size: 14px;\n  line-height: 50px;\n  margin-left: 8px;\n\n  .no-redirect {\n    color: #97a8be;\n    cursor: text;\n  }\n}\n</style>\n"]}]}