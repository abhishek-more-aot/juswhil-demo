{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/documents/components/documentDetails.vue?vue&type=style&index=1&id=bc75fc02&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/documents/components/documentDetails.vue","mtime":1668755781589},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jcmVhdGVQb3N0LWNvbnRhaW5lciB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwoKICAuY3JlYXRlUG9zdC1tYWluLWNvbnRhaW5lciB7CiAgICBwYWRkaW5nOiA0MHB4IDQ1cHggMjBweCA1MHB4OwoKICAgIC5wb3N0SW5mby1jb250YWluZXIgewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIEBpbmNsdWRlIGNsZWFyZml4OwogICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwoKICAgICAgLnBvc3RJbmZvLWNvbnRhaW5lci1pdGVtIHsKICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgfQogICAgfQogIH0KCiAgLndvcmQtY291bnRlciB7CiAgICB3aWR0aDogNDBweDsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHJpZ2h0OiAxMHB4OwogICAgdG9wOiAwcHg7CiAgfQp9Cg=="},{"version":3,"sources":["documentDetails.vue"],"names":[],"mappings":";AA0lBA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"documentDetails.vue","sourceRoot":"src/views/documents/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"formData\"\n        :model=\"formData\"\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n        v-if=\"!isEdit\"\n      >\n        <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n          required\n        >\n          <el-switch v-model=\"formData.enabled\" />\n        </el-form-item>\n\n        <el-form-item\n          label=\"Title\"\n          prop=\"title\"\n        >\n          <el-input\n            v-model=\"formData.title\"\n            name=\"title\"\n            placeholder=\"Title\"\n          />\n        </el-form-item>\n\n        <!-- <el-form-item\n          label=\"Description\"\n          prop=\"description\"\n        >\n          <el-input\n            type=\"textarea\"\n            :rows=\"2\"\n            :cols=\"4\"\n            v-model=\"formData.description\"\n            name=\"description\"\n            placeholder=\"Description\">\n          </el-input>\n        </el-form-item> -->\n\n        \n        <el-form-item label=\"Document\" prop=\"document\">\n          <el-upload\n            ref=\"file\"\n            class=\"upload-demo\"\n            action=\"https://jsonplaceholder.typicode.com/posts/\"\n            :http-request=\"uploadDocSectionFile\"\n            multiple\n            :file-list=\"docFileList\"\n            list-type=\"file\"\n            :show-file-list=\"false\"\n            accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel ,application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n          >\n            <el-button size=\"medium\" type=\"primary\" v-loading=\"documentLoading\"> Click to upload </el-button>\n          </el-upload>\n          \n          <span v-if=\"formData.document != null\">\n              <span v-if=\"formData.document.length > 0\">\n                  <a\n                    :href=\"formData.document\"\n                    target=\"-blank\"\n                  >\n                  <svg-icon\n                      name=\"documentation\"\n                      style=\"\n                        font-size: 25px;\n                        color: green;\n                        cursor: pointer;\n                        margin-left: 5px;\n                      \"\n                    />\n                  </a>  \n                \n                </span>\n              </span>\n           \n        </el-form-item>\n\n        \n\n        <el-form-item>\n          <el-button\n            v-loading=\"loading\"\n            v-waves\n            type=\"success\"\n            @click=\"submitForm\"\n          >\n            {{ $t(\"global.form.save\") }}\n          </el-button>\n          <el-button\n            v-waves\n            type=\"reset\"\n            @click=\"resetForm\"\n          >\n            {{ $t(\"global.form.reset\") }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n\n      <el-form\n        ref=\"formData\"\n        :model=\"formData\"\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n        v-if=\"isEdit\"\n      >\n        <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n          required\n        >\n          <el-switch v-model=\"formData.enabled\" />\n        </el-form-item>\n\n        <el-form-item\n          label=\"Title\"\n          prop=\"title\"\n        >\n          <el-input\n            v-model=\"formData.title\"\n            name=\"title\"\n            placeholder=\"Title\"\n          />\n        </el-form-item>\n\n        \n\n       \n        <el-form-item label=\"Document\" prop=\"document\">\n          <el-upload\n            ref=\"file\"\n            class=\"upload-demo\"\n            action=\"https://jsonplaceholder.typicode.com/posts/\"\n            :http-request=\"uploadDocSectionFile\"\n            multiple\n            :file-list=\"docFileList\"\n            list-type=\"file\"\n            :show-file-list=\"false\"\n            accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel ,application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n          >\n            <el-button size=\"medium\" type=\"primary\" v-loading=\"documentLoading\"> Click to upload </el-button>\n          </el-upload>\n          \n          <span v-if=\"formData.document != null\">\n              <span v-if=\"formData.document.length > 0\">\n                  <a\n                    :href=\"formData.document\"\n                    target=\"-blank\"\n                  >\n                  <svg-icon\n                      name=\"documentation\"\n                      style=\"\n                        font-size: 25px;\n                        color: green;\n                        cursor: pointer;\n                        margin-left: 5px;\n                      \"\n                    />\n                  </a>  \n                \n                </span>\n              </span>\n           \n        </el-form-item>\n\n\n\n        <el-form-item>\n          <el-button\n            v-loading=\"loading\"\n            v-waves\n            type=\"success\"\n            @click=\"submitForm\"\n          >\n            {{ $t(\"global.form.save\") }}\n          </el-button>\n          <el-button\n            v-waves\n            type=\"reset\"\n            @click=\"resetForm\"\n          >\n            {{ $t(\"global.form.reset\") }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator'\nimport {\n  getDocumentsById,\n  updateDocument,\n  createDocument\n} from '@/api/documents'\nimport { AppModule } from '@/store/modules/app'\nimport { TagsViewModule, ITagView } from '@/store/modules/tags-view'\nimport { Form } from 'element-ui'\nimport router from '@/router'\nimport { Action } from 'vuex-module-decorators'\nimport { getQuery } from '@/utils'\nimport PanThumb from '@/components/PanThumb/index.vue'\nimport FileUpload from '@/components/FileUpload/index.vue'\nimport { getAppVersions, uploadFile } from '@/api/common'\nimport { defaultDocumentsData } from '@/api/documents'\nimport AvatarUpload from '@/components/AvatarUpload/index.vue'\n// import { getTendors } from '@/api/tendors/tendors'\n// import { defaultDocumentTypeData, getDocumentsType } from '@/api/documenttype/documenttype'\n// import { getUsers } from '@/api/users'\n\n@Component({\n  name: 'documentDetails',\n  components: {\n    FileUpload,\n    PanThumb,\n    AvatarUpload\n  }\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n  private platformList: any = ['android', 'ios'];\n  private pageList: any = ['Home'];\n  private limitnum = 1;\n  \n  // this added\n  private tendorIdList: any = [];\n  private documentMasterIdList: any = [];\n  private documentMaster: any = [];\n  private docFileList:any = [];\n\n  private fileList: any = [];\n  private appVersionList: any = [];\n  private image = '';\n  private document =''\n  private documentLoading=false\n  private showImageUpload = false;\n  private formData = Object.assign({}, defaultDocumentsData);\n  // private postForm = Object.assign({}, defaultDocumentTypeData);\n  private loading = false;\n  private rules = {\n    // title: [\n    //   {\n    //     required: true,\n    //     trigger: 'blur',\n    //     message: 'Title is required'\n    //   },\n    //   {\n    //     min: 3,\n    //     max: 50,\n    //     message: 'Length should be 3 to 50',\n    //     trigger: 'blur'\n    //   }\n    // ],\n    title: [\n      {\n        required: true,\n        message: \"Please enter title\",\n        trigger: [\"blur\",\"change\"]\n      },\n      {\n        pattern: '^[a-zA-Z0-9_]',\n        message: \"Space not allow at start of title \",\n        trigger: [\"blur\", \"change\"],\n      },  \n      // {\n      //   pattern: \"^[a-zA-Z ]*$\",\n      //   message: \"Please enter valid input\"\n      // }\n    ],\n    document: [\n      {\n        required: true,\n        trigger: 'blur',\n        message: 'Please upload document'\n      },\n      // {\n      //   min: 3,\n      //   message: 'Length should be greater than 3',\n      //   trigger: 'blur'\n      // }\n    ],\n    source:[\n       {\n        required: true,\n        trigger: 'blur',\n        message: 'Source is required'\n      },\n    ],\n    page: [\n      {\n        required: true,\n        trigger: 'blur'\n      }\n    ],\n    link: [\n      {\n        trigger: 'blur'\n      },\n      {\n        pattern: /[-a-zA-Z0-9@%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/,\n        message: 'Invalid URL format',\n        trigger: ['blur', 'change']\n      }\n    ]\n  };\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language\n  }\n  private documentClose(){\n    this.formData.document='';\n    this.formData.tags=''\n  }\n\n  created() {\n    this.getAppVersionList()\n    // this.fetchTendors()\n    // this.fetchDocTypes()\n\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id\n      this.fetchData(parseInt(id))\n      \n    } else {\n      this.formData = Object.assign({}, defaultDocumentsData)\n      \n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route)\n  }\n\n  private async fetchData(id: number) {\n    try {\n      const data: any = await getDocumentsById(id)\n      this.formData = data\n      this.image = data.image\n      // this.document=data.document\n      // const title = this.formData.description ? this.formData.description : ''\n      // Set tagsview title\n      // this.setTagsViewTitle(title)\n    } catch (err) {\n      Promise.reject(err)\n    }\n  }\n\n  //  private async fetchTendors() {\n  //   this.tendorIdList = await getTendors(\n  //     getQuery({\n  //       enabled: true,\n  //       sort: 'id,ASC',\n  //       filter: {\n  //         enabled: 'eq'\n  //       }\n  //     })\n  //   )\n    \n  // }\n\n    // private async fetchDocTypes() {\n    // this.documentMasterIdList = await getDocumentsType(\n    //     getQuery({\n    //       enabled: true,\n    //       sort: 'id,ASC',\n    //       filter: {\n    //         enabled: 'eq'\n    //       }\n    //     })\n    //   )\n      \n    // }\n\n  // private async uploadSectionFile(param: any) {\n    \n  //   var fileObj = param.file\n  //   var form = new FormData()\n    \n  //   form.append('file', fileObj)\n  //   await uploadFile(form, (event: ProgressEvent) => {\n  //     console.log(event)\n  //   }).then((res) => {\n      \n  //     this.formData.image = res.toString()\n  //   })\n    \n  // }\n\n    private async uploadDocSectionFile(param: any) {\n      var fileObj = param.file\n      var form = new FormData()\n      this.documentLoading=true;\n      form.append('file', fileObj)\n      \n      await uploadFile(form, (event: ProgressEvent) => {\n         this.documentLoading=true;\n        console.log(event)\n      }).then((res) => {\n        this.documentLoading=true;\n        this.formData.document = res.toString()\n        console.log(res);\n        console.log(this.formData);\n        this.documentLoading=false;\n      }).catch((err)=>{\n        console.log(err);\n      })\n    }\n\n  private handleUploadChange(file: any){\n    this.docFileList = [file];\n  }\n\n  private uploadFileError(err: any, file: any, fileList: any) {\n    this.$message.error('upload failed!')\n  }\n\n  private exceedFile(files: any, fileList: any) {\n    this.$message.error('Only upload' + this.limitnum + 'Files')\n  }\n\n  // private handleRemove(file: any) {\n    \n  //   this.formData.image = ''\n  //   const temp: any = this.$refs.upload\n  //   temp.clearFiles()\n    \n  // }\n\n  private uploadFileSuccess(response: any, file: any, fileList: any) {\n    if (response.data.error == 0) {\n      file.response = response.data.data\n      this.fileList.push(file)\n    } else {\n      this.$message.error(response.data.message) // File upload error prompt\n    }\n  }\n\n  private toggleShow() {\n    this.showImageUpload = !this.showImageUpload\n  }\n\n  private onClose() {\n    this.showImageUpload = false\n  }\n\n  private onCropUploadSuccess(jsonData: any, field: string) {\n    this.showImageUpload = false\n    this.image = jsonData.files[field]\n  }\n\n  private cropSuccess(imgDataUrl: string, field: string) {\n    this.image = imgDataUrl\n    const data = new FormData()\n    fetch(imgDataUrl)\n      .then((res) => res.blob())\n      .then((blob) => {\n        const file = new File([blob], 'img.' + blob.type.split('/')[1], {\n          type: 'image/png'\n        })\n        data.append('file', file)\n        uploadFile(data, (event: ProgressEvent) => {\n          console.log(event)\n\n        }).then((res: any) => {\n          console.log(res)\n          \n          // this.formData.image = res\n        })\n      })\n    \n  }\n\n\n\n  private setTagsViewTitle(title: string) {\n    const tagView = this.tempTagView\n    if (tagView) {\n      tagView.title = `${title}-${this.formData.id}`\n      TagsViewModule.updateVisitedView(tagView)\n    }\n  }\n\n  private setPageTitle(title: string) {\n    document.title = `${title} - ${this.formData.id}`\n    // document.title = `${title}`\n  }\n\n  private submitForm() {\n    (this.$refs.formData as Form).validate((valid) => {\n      if (valid) {\n        this.saveForm()\n      } else {\n        return false\n      }\n    })\n  }\n\n  private resetForm() {\n    (this.$refs.formData as Form).resetFields()\n    this.fileList = []\n    // this.formData.image = ''\n  }\n\n  @Action\n  public async saveForm() {\n    try {\n      this.loading = true\n      if (this.isEdit) { \n        \n        // this.formData.documentMaster = { id : this.formData.documentMasterId}\n        // this.formData.tendorId= Number(this.$route.params.id)\n        await updateDocument(this.formData.id, this.formData)\n        \n      } else {\n        \n        this.formData.orderId= Number(this.$route.params.id)\n        await createDocument(this.formData)\n\n        \n      }\n\n      this.$notify({\n        title: 'Success',\n        message: 'Document saved successfully',\n        type: 'success',\n        duration: 2000\n      })\n      \n      router.push('/documents/list/' + Number(this.formData.orderId))\n      \n    } catch (err) {\n      this.loading = false\n    }\n  }\n\n  private async getAppVersionList() {\n    try {\n      this.appVersionList = await getAppVersions()\n    } catch (err) {\n      Promise.reject(err)\n    }\n  }\n\n  private imageUpload(file: any) {\n    // this.formData.image = file.response\n  }\n\n  // private sendToAllToggled() {\n  //   if (this.formData.sendToAll) {\n  //     this.$confirm(\n  //       'Are you sure want to send notification to All users?',\n  //       'Attention!',\n  //       {\n  //         confirmButtonText: \"Yes, I know what I'm doing\",\n  //         confirmButtonClass: 'el-button--success',\n  //         cancelButtonText: this.$tc('table.cancel'),\n  //         cancelButtonClass: 'el-button--danger',\n  //         type: 'error'\n  //       }\n  //     )\n  //       .then((confirm) => {\n  //         // let it confirm\n  //         // clear other dropdowns\n  //         this.formData.countryId = null\n  //         this.formData.stateId = null\n  //         this.formData.cityId = null\n\n  //         // delete this.formData.country\n  //         // delete this.formData.state\n  //         // delete this.formData.city\n  //       })\n  //       .catch((_) => {\n  //         this.formData.sendToAll = false\n  //       })\n  //   }\n  // }\n}\n</script>\n<style lang=\"scss\">\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n  }\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n</style>\n"]}]}