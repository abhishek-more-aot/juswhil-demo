{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/order/components/OrderDetail.vue?vue&type=style&index=0&id=0d978121&lang=scss&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/order/components/OrderDetail.vue","mtime":1668755817694},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hZG1pbi10ZXh0YXJlYSB7CiAgdGV4dGFyZWEgewogICAgcGFkZGluZy1yaWdodDogNDBweDsKICAgIHJlc2l6ZTogbm9uZTsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1yYWRpdXM6IDBweDsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkdGV4dEFyZWFCb3R0b207CiAgfQp9Cg=="},{"version":3,"sources":["OrderDetail.vue"],"names":[],"mappings":";AAsVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OrderDetail.vue","sourceRoot":"src/views/order/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n      >\n        <div\n          v-for=\"(cart,index) in postForm.addToCart\"\n          :key=\"index\"\n        >\n          <el-card\n            v-if=\"postForm.addToCart.length>0\"\n            class=\"box-card\"\n            style=\"width: 100%\"\n          >\n            <div>\n              <el-row>\n                <el-col\n                  :span=\"8\"\n                >\n                  <el-avatar\n                    :size=\"140\"\n                    :src=\"cart.product.image\"\n                    fit=\"fill\"\n                    shape=\"square\"\n                  />\n                </el-col>\n                <el-col\n                  :span=\"16\"\n                >\n                  <el-row>\n                    <el-col><span v-if=\"cart.product.name\"><b>{{ cart.product.name }}</b><br><br></span></el-col>\n                    <el-col>\n                      <el-form-item\n                        style=\"margin-bottom: 20px;\"\n                        label=\"Quantity\"\n                        prop=\"\"\n                      >\n                        <el-input-number\n                          v-model=\"postForm.addToCart[index].quantity\"\n                          name=\"quantity\"\n                          :min=\"1\"\n                          required\n                          style=\"width:50%\"\n                          placeholder=\"Quantity\"\n                        />\n                        <br><span>{{ postForm.addToCart[index].multiplier }}</span>\n                      </el-form-item>\n                      <el-button\n                        size=\"small\"\n                        type=\"danger\"\n                        icon=\"el-icon-delete\"\n                        @click=\"handleDelete(index)\"\n                      />\n                      <el-button\n                        size=\"small\"\n                        type=\"primary\"\n                        @click=\"changeQuantity(postForm.addToCart[index])\"\n                      >\n                        update\n                      </el-button>\n                    </el-col>\n                  </el-row>\n                </el-col>\n              </el-row>\n            </div>\n          </el-card>\n          <br><br>\n        </div>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator'\nimport { isValidURL } from '@/utils/validate'\nimport {\n  getAdminById,\n  defaultAdminData,\n  updateAdmin,\n  register\n} from '@/api/admins'\nimport { AppModule } from '@/store/modules/app'\nimport { TagsViewModule, ITagView } from '@/store/modules/tags-view'\nimport { Form } from 'element-ui'\nimport router from './../../../router'\nimport { Action } from 'vuex-module-decorators'\nimport { getAdminsRoles } from '@/api/adminsRoles'\nimport { getQuery } from '../../../utils'\nimport { defaultOrderData, updateOrder, addOrder, getOrderById } from '@/api/order'\nimport PanThumb from '@/components/PanThumb/index.vue'\nimport AvatarUpload from '@/components/AvatarUpload/index.vue'\nimport { uploadFile } from '@/api/common'\nimport { updateCart } from '@/api/cart'\n@Component({\n  name: 'TypeDetail',\n  components: {\n    PanThumb,\n    AvatarUpload\n  }\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n  private redirectionType: any = [\n    {\n      id: '0',\n      name: 'Link'\n    },\n    {\n      id: '1',\n      name: 'Contact Page'\n    },\n    {\n      id: '2',\n      name: 'About Page'\n    }\n  ];\n\n  private postForm =Object.assign({}, defaultOrderData);\n  private loading = false;\n  private showImageUpload = false;\n  private image = 'https://via.placeholder.com/154'\n  private toggleShow() {\n    this.showImageUpload = !this.showImageUpload\n  }\n\n  private onCropUploadSuccess(jsonData: any, field: string) {\n    this.showImageUpload = false\n    this.image = jsonData.files[field]\n  }\n\n  private onClose() {\n    this.showImageUpload = false\n  }\n\n  private rules = {\n    fullName: [\n      {\n        required: true,\n        message: 'Please enter full name',\n        trigger: ['blur', 'change']\n      },\n      { min: 3, message: 'Length should be greater than 3', trigger: ['blur', 'change'] },\n      {\n        pattern: '^[a-zA-Z ]*$',\n        message: 'Name should contain characters only',\n        trigger: ['blur', 'change']\n      }\n    ],\n    email: [\n      // {\n      //   required: true,\n      //   message: 'Please enter email',\n      //   trigger: 'blur'\n      // },\n      {\n        type: 'email',\n        message: 'Please enter correct email',\n        trigger: ['blur', 'change']\n      }\n    ],\n    pincode: [\n      {\n        pattern: '^[1-9][0-9]{5}$',\n        message: 'Please enter correct pincode',\n        trigger: ['blur', 'change']\n      }\n    ],\n\n    contactNumber: [\n      {\n        required: true,\n        message: 'Please enter contact number',\n        trigger: 'blur'\n      },\n      {\n        trigger: ['blur', 'change'],\n        pattern: '(^[0-9]*$)',\n        message: 'Contact number should contain number only'\n      },\n      {\n        max: 10,\n        min: 10,\n        message: 'Length should be of 10 Digits',\n        trigger: ['blur', 'change']\n      }\n    ]\n\n  };\n\n  handleDelete(index:any) {\n    this.$confirm('This will permanently delete the file. Continue?', 'Warning', {\n      confirmButtonText: 'OK',\n      cancelButtonText: 'Cancel',\n      type: 'warning'\n    }).then(() => {\n      if (index <= this.postForm.addToCart.length) {\n        \n        this.postForm.addToCart.splice(index, 1)\n        this.postForm.addToCartIds.splice(index, 1)\n        updateOrder(this.postForm.id, this.postForm).then(() => {\n          \n          this.$message({\n            type: 'success',\n            message: 'Delete successfully'\n          })\n        })\n      }\n    }).catch(() => {\n      this.$message({\n        type: 'info',\n        message: 'Delete canceled'\n      })\n    })\n  }\n\n  changeQuantity(cart:any) {\n    \n    if (cart) {\n      updateCart(cart.id, cart).then(() => {\n        this.$message({\n          message: 'Quantity updated',\n          type: 'success'\n        })\n      })\n    }\n  }\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language\n  }\n\n  created() {\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id\n      this.fetchData(parseInt(id))\n    } else {\n      this.postForm = Object.assign({}, defaultOrderData)\n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route)\n  }\n\n  private async fetchData(id: number) {\n    try {\n      const data: any = await getOrderById(id)\n      \n      this.postForm = data.product\n      this.image = data.image\n    } catch (err) {\n      Promise.reject(err)\n    }\n  }\n\n  private setTagsViewTitle(title: string) {\n    const tagView = this.tempTagView\n    if (tagView) {\n      tagView.title = `${title}-${this.postForm.id}`\n      TagsViewModule.updateVisitedView(tagView)\n    }\n  }\n\n  private setPageTitle(title: string) {\n    document.title = `${title} - ${this.postForm.id}`\n  }\n\n  private submitForm() {\n    (this.$refs.postForm as Form).validate(valid => {\n      if (valid) {\n        this.saveForm()\n      } else {\n        return false\n      }\n    })\n  }\n\n  private resetForm() {\n    (this.$refs.postForm as Form).resetFields()\n    this.image = 'https://via.placeholder.com/154'\n  }\n\n  @Action\n  public async saveForm() {\n    try {\n      this.loading = true\n      if (this.isEdit) {\n        await updateOrder(this.postForm.id, this.postForm)\n      } else {\n        await addOrder(this.postForm)\n      }\n\n      this.$notify({\n        title: 'Success',\n        message: 'Data saved successfully',\n        type: 'success',\n        duration: 2000\n      })\n      router.push('/Order/list')\n    } catch (err) {\n      this.loading = false\n    }\n  }\n\n  // private imageUpload(file: any) {\n  //   this.postForm.image = file.response\n  // }\n\n  // private sendToAllToggled() {\n  //   if (this.postForm.sendToAll) {\n  //     this.$confirm(\n  //       'Are you sure want to send notification to All Orders?',\n  //       'Attention!',\n  //       {\n  //         confirmButtonText: \"Yes, I know what I'm doing\",\n  //         confirmButtonClass: 'el-button--success',\n  //         cancelButtonText: this.$tc('table.cancel'),\n  //         cancelButtonClass: 'el-button--danger',\n  //         type: 'error'\n  //       }\n  //     )\n  //       .then(confirm => {\n  //         // let it confirm\n  //         // clear other dropdowns\n  //       })\n  //       .catch(_ => {\n  //         this.postForm.sendToAll = false\n  //       })\n  //   }\n  // }\n}\n</script>\n<style lang=\"scss\">\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n    border-bottom: 1px solid $textAreaBottom;\n  }\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n</style>\n"]}]}