{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/userContact/components/UserContactDetail.vue?vue&type=style&index=1&id=18662f7e&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/userContact/components/UserContactDetail.vue","mtime":1672064999299},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jcmVhdGVQb3N0LWNvbnRhaW5lciB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwoKICAuY3JlYXRlUG9zdC1tYWluLWNvbnRhaW5lciB7CiAgICBwYWRkaW5nOiA0MHB4IDQ1cHggMjBweCA1MHB4OwoKICAgIC5wb3N0SW5mby1jb250YWluZXIgewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIEBpbmNsdWRlIGNsZWFyZml4OwogICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwoKICAgICAgLnBvc3RJbmZvLWNvbnRhaW5lci1pdGVtIHsKICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgfQogICAgfQogIH0KLmF2YXRhciB7CiAgd2lkdGg6IDQwMHB4OwogIGhlaWdodDogMjAwcHg7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0cmFuc2Zvcm0tb3JpZ2luOiA5NSUgNDAlOwp9CgogIC53b3JkLWNvdW50ZXIgewogICAgd2lkdGg6IDQwcHg7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICByaWdodDogMTBweDsKICAgIHRvcDogMHB4OwogIH0KfQo="},{"version":3,"sources":["UserContactDetail.vue"],"names":[],"mappings":";AAgVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserContactDetail.vue","sourceRoot":"src/views/userContact/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        status-icon\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n      >\n        <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n        >\n          <el-switch v-model=\"postForm.enabled\" />\n        </el-form-item>\n\n        <el-form-item\n          label=\"Contact Number\"\n          prop=\"contactNumber\"\n          style=\"margin-bottom: 20px;\"\n        >\n          <el-input\n            v-model=\"postForm.contactNumber\"\n            class=\"col\"\n            style=\"width:50%\"\n            name=\"contactNumber\"\n            required\n            placeholder=\"Contact\"\n          />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button\n            v-loading=\"loading\"\n            v-waves\n            type=\"success\"\n            class=\"row\"\n            @click=\"submitForm\"\n          >\n            {{ $t('global.form.save') }}\n          </el-button>\n          <el-button\n            v-if=\"!isEdit\"\n            v-waves\n            type=\"reset\"\n            @click=\"resetForm\"\n          >\n            {{ $t('global.form.reset') }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator'\nimport { isValidURL } from '@/utils/validate'\nimport {\n  getUserContactById,\n  defaultUserContactData,\n  updateUserContact,\n  addUserContact\n} from '@/api/usersContact'\nimport { AppModule } from '@/store/modules/app'\nimport { TagsViewModule, ITagView } from '@/store/modules/tags-view'\nimport { Form } from 'element-ui'\nimport router from './../../../router'\nimport { Action } from 'vuex-module-decorators'\nimport Dropzone from '@/components/Dropzone/index.vue'\nimport { uploadFile } from '@/api/common'\nimport AvatarUpload from '@/components/AvatarUpload/index.vue'\nimport PanThumb from '@/components/PanThumb/index.vue'\nimport moment from 'moment'\n\n@Component({\n  name: 'UserContactDetail',\n  components: {\n    Dropzone,\n    AvatarUpload,\n    PanThumb\n  }\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n  private validity: Date[] = [];\n  private roleList: any = [];\n  private planList: any = [];\n  private userId=0;\n  private typeList: any = [\n    'Agent',\n    'Development Officer',\n    'SBA',\n    'CLIA',\n    'Other'\n  ];\n\n   private showImageUpload = false\n  private image = 'https://stumpz.s3.ap-south-1.amazonaws.com/1611434872392-img.png'\n  private file='';\n  private params = { some_params: 'your_params_goes_here' }\n  private headers = { smail: '*_~' }\n   options:any={\n     acceptedFiles: 'image/*'\n   };\n\n   private onCropUploadSuccess(jsonData: any, field: string) {\n     this.showImageUpload = false\n     this.image = jsonData.files[field]\n   }\n\n   data() {\n     return {\n       datePickerOptions: {\n         disabledDate(date:any) {\n           return moment() >= date\n         }\n       }\n     }\n   }\n\n   //  private cropSuccess(imgDataUrl: string, field: string) {\n   //    this.image = imgDataUrl\n   //    const data = new FormData()\n   //    fetch(imgDataUrl)\n   //      .then((res) => res.blob())\n   //      .then((blob) => {\n   //        const file = new File([blob], 'img.' + blob.type.split('/')[1], {\n   //          type: 'image/png'\n   //        })\n   //        data.append('file', file)\n   //        uploadFile(data, (event: ProgressEvent) => {\n   //          console.log(event)\n   //        }).then((res: any) => {\n   //          this.postForm.featuredImage = res\n   //        })\n   //      })\n   //  }\n\n  private countryList: any = [];\n  private stateList: any = [];\n  private cityList: any = [];\n\n  private planName='';\n\n  private validateRequire = (rule: any, value: string, callback: Function) => {\n    if (value === '') {\n      if (rule.field === 'imageURL') {\n        this.$message({\n          message: 'Upload cover image is required',\n          type: 'error'\n        })\n      } else {\n        this.$message({\n          message: rule.field + ' is required',\n          type: 'error'\n        })\n      }\n      callback(new Error(rule.field + ' is required'))\n    } else {\n      callback()\n    }\n  };\n\n  //  private dropzoneSuccess(file: File, response: any) {\n  //\n  //     const data = new FormData()\n  //     data.append('file', file)\n  //     uploadFile(data, (event: ProgressEvent) => {\n  //       console.log(event)\n  //     }).then(res => {\n  //       this.postForm.termsAndCondition = res.toString()\n  //       console.log(res.toString())\n  //     })\n  //     this.$notify({\n  //       title: 'Success',\n  //       message: 'File saved successfully',\n  //       type: 'success',\n  //       duration: 2000\n  //     })\n  //     this.$message({ message: 'Upload success', type: 'success' })\n  //   }\n\n  private postForm = Object.assign({}, defaultUserContactData);\n  private loading = false;\n  private rules = {\n    contactNumber: [\n      {\n        required: true,\n        message: 'Please enter contact number',\n        trigger: 'blur'\n      },\n      {\n        trigger: ['blur', 'change'],\n        pattern: '(^[0-9]*$)',\n        message: 'Contact number should contain number only'\n      },\n      {\n        max: 10,\n        min: 10,\n        message: 'Length should be of 10 Digits',\n        trigger: ['blur', 'change']\n      }\n    ]\n  };\n\n  private toggleShow() {\n    this.showImageUpload = !this.showImageUpload\n  }\n\n  private onClose() {\n    this.showImageUpload = false\n  }\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language\n  }\n\n  created() {\n    this.userId = parseInt(this.$route.params && this.$route.params.id)\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id\n      this.fetchData(parseInt(id))\n    } else {\n      this.postForm = Object.assign({}, defaultUserContactData)\n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route)\n  }\n\n   private selectOptions = [\n     { name: 'Male', value: 'male' },\n     { name: 'Female', value: 'female' },\n     { name: 'Others', value: 'others' }\n   ];\n\n   private async fetchData(id: number) {\n     try {\n       const data: any = await getUserContactById(id)\n       this.postForm = data\n     } catch (err) {\n       console.error(err)\n     }\n   }\n\n   private setTagsViewTitle(title: string) {\n     const tagView = this.tempTagView\n     if (tagView) {\n       tagView.title = `${title}-${this.postForm.id}`\n       TagsViewModule.updateVisitedView(tagView)\n     }\n   }\n\n   private setPageTitle(title: string) {\n     document.title = `${title} - ${this.postForm.id}`\n   }\n\n   private submitForm() {\n     (this.$refs.postForm as Form).validate(valid => {\n       if (valid) {\n         this.saveForm()\n       } else {\n         console.error('Submit Error!')\n         return false\n       }\n     })\n   }\n\n   private resetForm() {\n     (this.$refs.postForm as Form).resetFields()\n   }\n\n  @Action\n   public async saveForm() {\n     try {\n       this.loading = true\n       if (this.isEdit) {\n         await updateUserContact(this.postForm.id, this.postForm)\n       } else {\n         await addUserContact(this.postForm)\n       }\n\n       this.$notify({\n         title: 'Success',\n         message: 'Contact saved successfully',\n         type: 'success',\n         duration: 2000\n       })\n       router.push('/userContact/list/')\n     } catch (err) {\n       this.loading = false\n       console.error(err)\n     }\n   }\n}\n</script>\n\n<style lang=\"scss\">\n\n.col {\n  width: 68%;\n}\n\n@media screen and (max-width: 600px) {\n  .col {\n    width: 25%\n  }\n\n  .row{\n    float:left ;\n    margin-left: -20%;\n  }\n\n}\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n    border-bottom: 1px solid #bfcbd9;\n  }\n\n}\n\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n.avatar {\n  width: 400px;\n  height: 200px;\n  border-radius: 50%;\n  position: absolute;\n  transform-origin: 95% 40%;\n}\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n</style>\n"]}]}