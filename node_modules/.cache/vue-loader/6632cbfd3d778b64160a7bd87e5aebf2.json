{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/product/components/ProductDetail.vue?vue&type=style&index=1&id=168c3881&lang=scss&scoped=true&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/product/components/ProductDetail.vue","mtime":1674555481616},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jcmVhdGVQb3N0LWNvbnRhaW5lciB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwoKICAuY3JlYXRlUG9zdC1tYWluLWNvbnRhaW5lciB7CiAgICBwYWRkaW5nOiA0MHB4IDQ1cHggMjBweCA1MHB4OwoKICAgIC5wb3N0SW5mby1jb250YWluZXIgewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIEBpbmNsdWRlIGNsZWFyZml4OwogICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwoKICAgICAgLnBvc3RJbmZvLWNvbnRhaW5lci1pdGVtIHsKICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgfQogICAgfQogIH0KCiAgLndvcmQtY291bnRlciB7CiAgICB3aWR0aDogNDBweDsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHJpZ2h0OiAxMHB4OwogICAgdG9wOiAwcHg7CiAgfQp9CgouYXZhdGFyLXVwbG9hZGVyIC5lbC11cGxvYWQgewogIGJvcmRlcjogMXB4IGRhc2hlZCAjZDlkOWQ5OwogIGJvcmRlci1yYWRpdXM6IDZweDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIG92ZXJmbG93OiBoaWRkZW47Cn0KLmF2YXRhci11cGxvYWRlciAuZWwtdXBsb2FkOmhvdmVyIHsKICBib3JkZXItY29sb3I6ICM0MDllZmY7Cn0KLmF2YXRhci11cGxvYWRlci1pY29uIHsKICBmb250LXNpemU6IDI4cHg7CiAgY29sb3I6ICM4YzkzOWQ7CiAgd2lkdGg6IDE3OHB4OwogIGhlaWdodDogMTc4cHg7CiAgbGluZS1oZWlnaHQ6IDE3OHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQouYXZhdGFyIHsKICB3aWR0aDogMTc4cHg7CiAgaGVpZ2h0OiAxNzhweDsKICBkaXNwbGF5OiBibG9jazsKfQo="},{"version":3,"sources":["ProductDetail.vue"],"names":[],"mappings":";AAg0BA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ProductDetail.vue","sourceRoot":"src/views/product/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n      >\n        <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n        >\n          <el-switch v-model=\"postForm.enabled\" />\n        </el-form-item>\n\n        <el-form-item style=\"margin-bottom: 20px\" label=\"Name\" prop=\"name\">\n          <el-input\n            v-model=\"postForm.name\"\n            name=\"name\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Name\"\n          />\n        </el-form-item>\n\n        <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Model Number\"\n          prop=\"modelNumber\"\n        >\n          <el-input\n            v-model=\"postForm.modelNumber\"\n            name=\"modelNumber\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Model Number\"\n          />\n        </el-form-item>\n\n        <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Description\"\n          prop=\"description\"\n        >\n          <vue-editor v-model=\"postForm.description\" />\n          <!-- <el-input\n            v-model=\"postForm.description\"\n            name=\"description\"\n            type=\"textarea\"\n            style=\"width: 50%\"\n            :rows=\"4\"\n            required\n            placeholder=\"Description\"\n          /> -->\n        </el-form-item>\n\n        <!-- <el-form-item\n          style=\"margin-bottom: 30px\"\n          label=\"mrpPrice\"\n          prop=\"mrpPrice\"\n        >\n          <el-input\n            type=\"number\"\n            v-model=\"postForm.mrpPrice\"\n            name=\"mrpPrice\"\n            style=\"width:50%\"\n            required\n            placeholder=\"mrpPrice\"\n          />\n        </el-form-item> -->\n\n        <el-form-item style=\"margin-bottom: 30px\" label=\"Featured Image\" prop=\"image\">\n          <upload-image\n            :key=\"renderKey\"\n            :form-field=\"postForm.image\"\n            @handle-upload=\"updateImage\"\n            @handle-remove=\"removeImage\"\n          />\n          <!-- <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"Only Image of dimension 1000 * 1000 is accepted\"\n              placement=\"left-start\"\n            >\n              <span class=\"el-icon-question\" style=\"font-size: 20px\" />\n            </el-tooltip> -->\n        </el-form-item>\n\n        <!-- <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Featured Image\"\n          prop=\"image\"\n        >\n          <pan-thumb :image=\"image\" /><br>\n          <el-button\n            type=\"primary\"\n            icon=\"el-icon-upload\"\n            tyle=\"position: absolute;bottom: 15px;margin-left: 40px;\"\n            @click=\"toggleShow\"\n          >\n            Change Avatar\n          </el-button>\n          <avatar-upload\n            v-model=\"showImageUpload\"\n            field=\"avatar\"\n            @crop-success=\"cropSuccess\"\n            @close=\"onClose\"\n            @crop-upload-success=\"onCropUploadSuccess\"\n          />\n        </el-form-item> -->\n\n        <el-form-item\n          style=\"margin-bottom: 50px\"\n          label=\"Product images\"\n          prop=\"productImages\"\n        >\n          <br />\n          <el-upload\n            ref=\"upload\"\n            class=\"avatar-uploader\"\n            :on-change=\"uploadImages\"\n            list-type=\"picture-card\"\n            action=\"https://jsonplaceholder.typicode.com/posts/\"\n            accept=\"image/jpeg,image/png\"\n            :before-upload=\"beforeUpload\"\n            :auto-upload=\"false\"\n            :file-list=\"fileList\"\n            drag\n            limit=\"6\"\n            multiple\n          >\n            <i slot=\"default\" class=\"el-icon-plus\" />\n            <span style=\"color: red; margin-left: 10px\"\n              >only .JPG/PNG files</span\n            >\n\n            <div slot=\"file\" slot-scope=\"{ file }\">\n              <img\n                class=\"el-upload-list__item-thumbnail\"\n                :src=\"file.url\"\n                alt=\"\"\n              />\n              <span class=\"el-upload-list__item-actions\">\n                <span\n                  class=\"el-upload-list__item-preview\"\n                  @click=\"handlePictureCardPreview(file)\"\n                >\n                  <i class=\"el-icon-zoom-in\" />\n                </span>\n                <span\n                  v-if=\"!disabled\"\n                  class=\"el-upload-list__item-delete\"\n                  @click=\"handleRemove(file)\"\n                >\n                  <i class=\"el-icon-delete\" />\n                </span>\n              </span>\n            </div>\n          </el-upload>\n          <el-dialog :visible.sync=\"dialogVisible\">\n            <img width=\"100%\" :src=\"dialogImageUrl\" alt=\"\" />\n          </el-dialog>\n        </el-form-item>\n\n        <!-- Amazon Link -->\n        <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Amazon Link\"\n          prop=\"amazonLink\"\n        >\n          <el-input\n            v-model=\"postForm.amazonLink\"\n            name=\"amazonLink\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Amazon Link\"\n          />\n        </el-form-item>\n        <!-- Amazon Link -->\n\n        <!-- Flipkart Link -->\n        <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Flipkart Link\"\n          prop=\"flipkartLink\"\n        >\n          <el-input\n            v-model=\"postForm.flipkartLink\"\n            name=\"flipkartLink\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Flipkart Link\"\n          />\n        </el-form-item>\n        <!-- Flipkart Link -->\n\n        <!-- Myntra Link -->\n        <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Myntra Link\"\n          prop=\"myntraLink\"\n        >\n          <el-input\n            v-model=\"postForm.myntraLink\"\n            name=\"myntraLink\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Myntra Link\"\n          />\n        </el-form-item>\n        <!-- Myntra Link -->\n\n\n        <el-form-item\n          style=\"margin-bottom: 20px\"\n          label=\"Trending\"\n          prop=\"trending\"\n        >\n          <el-switch v-model=\"postForm.trending\" />\n        </el-form-item>\n        <el-form-item style=\"margin-bottom: 20px\" label=\"New\" prop=\"new\">\n          <el-switch v-model=\"postForm.new\" />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button\n            v-loading=\"loading\"\n            v-waves\n            style=\"background: #59b6e3; border: 1px solid #59b6e3\"\n            type=\"success\"\n            @click=\"submitForm\"\n          >\n            {{ $t(\"global.form.save\") }}\n          </el-button>\n          <el-button v-waves type=\"reset\" @click=\"resetForm\">\n            {{ $t(\"global.form.reset\") }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport { isValidURL } from \"@/utils/validate\";\nimport {\n  getAdminById,\n  defaultAdminData,\n  updateAdmin,\n  register,\n} from \"@/api/admins\";\nimport { AppModule } from \"@/store/modules/app\";\nimport { TagsViewModule, ITagView } from \"@/store/modules/tags-view\";\nimport { Form } from \"element-ui\";\nimport router from \"./../../../router\";\nimport { Action } from \"vuex-module-decorators\";\nimport { getAdminsRoles } from \"@/api/adminsRoles\";\nimport { getQuery } from \"../../../utils\";\nimport {\n  defaultProductData,\n  updateProduct,\n  addProduct,\n  getProductById,\n} from \"@/api/product\";\nimport PanThumb from \"@/components/PanThumb/index.vue\";\nimport AvatarUpload from \"@/components/AvatarUpload/index.vue\";\nimport { uploadFile } from \"@/api/common\";\nimport { getCategorys } from \"@/api/category\";\nimport { getOptions } from \"@/api/option\";\nimport Axios from \"axios\";\nimport { getOptionValues } from \"@/api/optionValues\";\nimport { getGst } from \"@/api/gst\";\nimport UploadImage from \"@/components/UploadImage/index.vue\";\nimport Vue2Editor from \"vue2-editor\";\n// import { getUnit } from '@/api/unit'\n@Component({\n  name: \"TypeDetail\",\n  components: {\n    PanThumb,\n    AvatarUpload,\n    UploadImage,\n    Vue2Editor,\n  },\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n\n  private postForm = Object.assign({}, defaultProductData);\n  private loading = false;\n  private showImageUpload = false;\n  private showSketchUpload = false;\n  private categoriesList: any = [];\n  private optionsList: any = [];\n  private optionValuesList: any = [];\n  private productPhotosArr: any = [];\n  private photos: any = [];\n  private renderKey: any;\n  dialogImageUrl = \"\";\n  private imageEdited = false;\n  dialogVisible = false;\n  disabled = false;\n  private fileList: any = [];\n  private editList: any = [];\n  private unitList: any = [];\n  private gstList: any = [];\n  private unitChanged = false;\n  private image = \"https://via.placeholder.com/300\";\n  private toggleShow() {\n    this.showImageUpload = !this.showImageUpload;\n  }\n\n  private toggleSketch() {\n    this.showSketchUpload = !this.showSketchUpload;\n  }\n\n  private onCropUploadSuccess(jsonData: any, field: string) {\n    this.showImageUpload = false;\n    this.showSketchUpload = false;\n    this.image = jsonData.files[field];\n  }\n\n  private onClose() {\n    this.showImageUpload = false;\n  }\n\n  private onSketchClose() {\n    this.showSketchUpload = false;\n  }\n  private updateImage(res: any) {\n    this.postForm.image = res;\n  }\n  private removeImage() {\n    this.postForm.image = \"\";\n  }\n\n  // private async fetchUnits() {\n  //   const data: any = await getUnit(getQuery({}))\n  //   this.unitList = data\n  //\n  // }\n\n  private handleUnitChange(field: any) {\n    if (this.isEdit) {\n      if (field !== \"\") {\n        this.postForm.unit = {\n          id: field,\n        };\n      } else if (field === \"\") {\n        delete this.postForm.unit;\n        this.postForm.unitId = null;\n        this.postForm.unit = {\n          id: null,\n        };\n      }\n\n      this.unitChanged = true;\n    }\n  }\n\n  private cropSuccess(imgDataUrl: string, field: string) {\n    this.image = imgDataUrl;\n    const data = new FormData();\n    fetch(imgDataUrl)\n      .then((res) => res.blob())\n      .then((blob) => {\n        const file = new File([blob], \"img.\" + blob.type.split(\"/\")[1], {\n          type: \"image/png\",\n        });\n        data.append(\"file\", file);\n        uploadFile(data, (event: ProgressEvent) => {\n          console.log(event);\n        }).then((res: any) => {\n          this.postForm.image = res;\n        });\n      });\n  }\n\n  async uploadImages(file: any, fileList: any) {\n    // var isIMAGE = false\n    // if (file.raw.type === 'image/jpeg' || file.raw.type === 'image/png') {\n    //\n    //   isIMAGE = true\n    // }\n    // if (!isIMAGE) {\n    //   this.fileList.forEach((element:any, index:any) => {\n    //     if (file.raw.name === element.name) {\n    //       fileList.splice(index, 1)\n    //       this.fileList.splice(index, 1)\n    //     }\n    //   })\n    //   this.$message.error('Avatar picture must be JPG format!')\n    // } else {\n    const img = new Image();\n    img.onload = () => {\n      this.fileList = fileList;\n      if (this.isEdit) {\n        this.imageEdited = true;\n        this.editList.push(file);\n      }\n    };\n    img.src = file.url;\n  }\n\n  handlePictureCardPreview(file: any) {\n    this.dialogImageUrl = file.url;\n    this.dialogVisible = true;\n  }\n\n  private handleRemove(file: any) {\n    this.fileList.forEach((photo: any, index: any) => {\n      if (photo.name === file.name) {\n        this.fileList.splice(index, 1);\n        this.postForm.productImages.splice(index, 1); // this.photos.splice(index, 1)\n      }\n    });\n  }\n\n  // Image upload size check\n  beforeUpload(file: any) {\n    var isIMAGE = false;\n    if (file.raw.type === \"image/jpeg\" || file.raw.type === \"image/png\") {\n      isIMAGE = true;\n    }\n    if (!isIMAGE) {\n      this.$message.error(\"Avatar picture must be JPG format!\");\n    }\n\n    return isIMAGE;\n  }\n\n  private async finalUpload() {\n    if (!this.isEdit) {\n      const formList: any = [];\n      const callList: any = [];\n      this.fileList.forEach((file: any) => {\n        var fileObj = file.raw;\n        var form = new FormData();\n        form.append(\"file\", fileObj);\n        formList.push(form);\n      });\n      await formList.forEach(async (form: any) => {\n        callList.push(\n          uploadFile(form, async (event: ProgressEvent) => {\n            console.log(event);\n          })\n        );\n      });\n      await Axios.all(callList).then((res) => {\n        this.postForm.productImages = res;\n      });\n    } else if (this.isEdit) {\n      const formList: any = [];\n      const callList: any = [];\n      this.editList.forEach((file: any) => {\n        var fileObj = file.raw;\n        var form = new FormData();\n        form.append(\"file\", fileObj);\n        formList.push(form);\n      });\n      await formList.forEach(async (form: any) => {\n        callList.push(\n          uploadFile(form, async (event: ProgressEvent) => {\n            console.log(event);\n          })\n        );\n      });\n\n      await Axios.all(callList).then(async (res) => {\n        res.forEach((response: any) => {\n          this.postForm.productImages.push(response);\n        });\n      });\n    }\n  }\n\n  private rules = {\n    name: [\n      {\n        required: true,\n        message: \"Please enter product name\",\n        trigger: [\"blur\", \"change\"],\n      },\n      {\n        min: 3,\n        message: \"Length should be greater than 3\",\n        trigger: [\"blur\", \"change\"],\n      },\n      // {\n      //   max: 20,\n      //   pattern: '^[a-zA-Z]{4,}(?: [a-zA-Z]+)?(?: [a-zA-Z]+)?$',\n      //   message: 'Spaces are not allowed',\n      //   trigger: ['blur', 'change']\n      // },\n      // {\n      //   pattern: '^[a-zA-Z ]*$',\n      //   message: 'Name should contain characters only',\n      //   trigger: ['blur', 'change']\n      // }\n    ],\n    cnfPrice: [\n      {\n        required: true,\n        message: \"Enter CNF Price\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    superStockistPrice: [\n      {\n        required: true,\n        message: \"Enter Super Stocklist Price\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    cdPrice: [\n      {\n        required: true,\n        message: \"Enter CD Price\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    sdPrice: [\n      {\n        required: true,\n        message: \"Enter SD Price\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    copPrice: [\n      {\n        required: true,\n        message: \"Enter COP Price\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    sopPrice: [\n      {\n        required: true,\n        message: \"Enter SOP Price\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    // mrpPrice: [\n    //   {\n    //    required: true,\n    //    message: \"Enter MRP Price\",\n    //    trigger: [\"blur\",\"change\"]\n    //   },\n    // ],\n    wbPrice: [\n      {\n        required: true,\n        message: \"Enter WB Price\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    gstId: [\n      {\n        required: true,\n        message: \"Please select GST\",\n        trigger: \"blur\",\n      },\n    ],\n    email: [\n      {\n        required: true,\n        message: \"Please enter email\",\n        trigger: \"blur\",\n      },\n      {\n        type: \"email\",\n        message: \"Please enter correct email\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    rating: [\n      {\n        required: true,\n        message: \"Please enter rating\",\n        trigger: \"blur\",\n      },\n    ],\n    modelNumber: [\n      {\n        required: true,\n        message: \"Please enter Model Number\",\n        trigger: [\"blur\", \"change\"],\n      },\n    ],\n    image: [\n      {\n        required: true,\n        message: \"Please enter image\",\n        trigger: \"blur\",\n      },\n    ],\n    productOptionId: [\n      {\n        required: true,\n        message: \"Please select product Options\",\n        trigger: \"blur\",\n      },\n    ],\n  };\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language;\n  }\n\n  created() {\n    // this.fetchUnits()\n    this.fetchOption();\n    this.fetchOptionValues();\n    this.fetchGst();\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id;\n      this.fetchData(parseInt(id));\n    } else {\n      this.postForm = Object.assign({}, defaultProductData);\n      this.postForm.categoriesId = parseInt(\n        this.$route.params && this.$route.params.categoriesId\n      );\n      if (parseInt(this.$route.params && this.$route.params.subCategoryId)) {\n        this.postForm.subCategoryId = parseInt(\n          this.$route.params && this.$route.params.subCategoryId\n        );\n      }\n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route);\n  }\n\n  private async fetchData(id: number) {\n    try {\n      const data: any = await getProductById(id);\n      this.postForm = data.product;\n      this.renderKey++;\n\n      this.image = data.product.image;\n\n      data.product.productImages.forEach((image: any, index: any) => {\n        this.fileList.push({ name: \"image1\" + index, url: image });\n      });\n\n      // Just for test\n      // const title = this.postForm.title ? this.postForm.title : ''\n      // Set tagsview title\n      // this.setTagsViewTitle(title)\n      // Set page title\n      // this.setPageTitle(title)\n    } catch (err) {\n      Promise.reject(err);\n    }\n  }\n\n  private async fetchOption() {\n    try {\n      this.optionsList = await getOptions(\n        getQuery({\n          enabled: true,\n          filter: {\n            enabled: \"eq\",\n          },\n        })\n      );\n    } catch (err) {\n      Promise.reject(err);\n    }\n  }\n\n  private async fetchOptionValues() {\n    try {\n      this.optionValuesList = await getOptionValues(\n        getQuery({\n          enabled: true,\n          filter: {},\n        })\n      );\n    } catch (err) {\n      Promise.reject(err);\n    }\n  }\n\n  private async fetchGst() {\n    try {\n      this.gstList = await getGst(\n        getQuery({\n          enabled: true,\n          filter: { enabled: \"eq\" },\n        })\n      );\n    } catch (err) {\n      Promise.reject(err);\n    }\n  }\n\n  private setTagsViewTitle(title: string) {\n    const tagView = this.tempTagView;\n    if (tagView) {\n      tagView.title = `${title}-${this.postForm.id}`;\n      TagsViewModule.updateVisitedView(tagView);\n    }\n  }\n\n  private setPageTitle(title: string) {\n    document.title = `${title} - ${this.postForm.id}`;\n  }\n\n  private async submitForm() {\n    (this.$refs.postForm as Form).validate((valid) => {\n      if (valid) {\n        this.saveForm();\n      } else {\n        return false;\n      }\n    });\n  }\n\n  private resetForm() {\n    (this.$refs.postForm as Form).resetFields();\n    this.image = \"https://via.placeholder.com/300\";\n    this.fileList = [];\n    this.renderKey--;\n    this.postForm.image = \"\";\n  }\n\n  @Action\n  public async saveForm() {\n    try {\n      await this.finalUpload();\n      this.loading = true;\n      if (this.isEdit) {\n        if (this.imageEdited) {\n          // await this.finalUpload()\n        }\n        this.postForm.gst = {\n          id: this.postForm.gstId,\n        };\n        await updateProduct(this.postForm.id, this.postForm);\n\n        this.$notify({\n          title: \"Success\",\n          message: \"Data updated successfully\",\n          type: \"success\",\n          duration: 2000,\n        });\n        // if (this.postForm.subCategoryId) {\n        //   router.push(\n        //     '/product/list/' +\n        //       this.postForm.categoriesId +\n        //       '/' +\n        //       this.postForm.subCategoryId\n        //   )\n        // } else {\n        this.loading = false;\n        router.push(\"/product/list/\" + this.postForm.categoriesId);\n        // }\n\n        // .catch((error: any) => {\n\n        //   this.loading = false\n        //   this.$message.error('some error occured.')\n        //   console.log(error)\n        // })\n      } else {\n        debugger;\n\n        await addProduct(this.postForm);\n        this.$notify({\n          title: \"Success\",\n          message: \"Data saved successfully\",\n          type: \"success\",\n          duration: 2000,\n        });\n        debugger;\n        this.loading = false;\n        router.push(\"/product/list/\" + this.postForm.categoriesId);\n      }\n    } catch (err) {\n      this.loading = false;\n    }\n  }\n\n  // private imageUpload(file: any) {\n  //   this.postForm.image = file.response\n  // }\n\n  // private sendToAllToggled() {\n  //   if (this.postForm.sendToAll) {\n  //     this.$confirm(\n  //       'Are you sure want to send notification to All users?',\n  //       'Attention!',\n  //       {\n  //         confirmButtonText: \"Yes, I know what I'm doing\",\n  //         confirmButtonClass: 'el-button--success',\n  //         cancelButtonText: this.$tc('table.cancel'),\n  //         cancelButtonClass: 'el-button--danger',\n  //         type: 'error'\n  //       }\n  //     )\n  //       .then(confirm => {\n  //         // let it confirm\n  //         // clear other dropdowns\n  //       })\n  //       .catch(_ => {\n  //         this.postForm.sendToAll = false\n  //       })\n  //   }\n  // }\n}\n</script>\n<style lang=\"scss\">\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n    border-bottom: 1px solid $textAreaBottom;\n  }\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n\n.avatar-uploader .el-upload {\n  border: 1px dashed #d9d9d9;\n  border-radius: 6px;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n.avatar-uploader .el-upload:hover {\n  border-color: #409eff;\n}\n.avatar-uploader-icon {\n  font-size: 28px;\n  color: #8c939d;\n  width: 178px;\n  height: 178px;\n  line-height: 178px;\n  text-align: center;\n}\n.avatar {\n  width: 178px;\n  height: 178px;\n  display: block;\n}\n</style>\n"]}]}