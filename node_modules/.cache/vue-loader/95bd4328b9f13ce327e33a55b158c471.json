{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/trending/components/TrendingDetail.vue?vue&type=style&index=0&id=38d20ebf&lang=scss&","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/views/trending/components/TrendingDetail.vue","mtime":1672064999295},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/css-loader/dist/cjs.js","mtime":1653481241427},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1668596436320},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/postcss-loader/src/index.js","mtime":1655274298318},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/sass-loader/dist/cjs.js","mtime":1655274300161},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/style-resources-loader/lib/index.js","mtime":1655274300173},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/vue-loader/lib/index.js","mtime":1668596436320}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hZG1pbi10ZXh0YXJlYSB7CiAgdGV4dGFyZWEgewogICAgcGFkZGluZy1yaWdodDogNDBweDsKICAgIHJlc2l6ZTogbm9uZTsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1yYWRpdXM6IDBweDsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkdGV4dEFyZWFCb3R0b207CiAgfQp9Cg=="},{"version":3,"sources":["TrendingDetail.vue"],"names":[],"mappings":";AA8UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TrendingDetail.vue","sourceRoot":"src/views/trending/components","sourcesContent":["<template>\n  <div class=\"form-block\">\n    <div class=\"source\">\n      <el-form\n        ref=\"postForm\"\n        :model=\"postForm\"\n        status-icon\n        :rules=\"rules\"\n        label-width=\"160px\"\n        class=\"demo-form\"\n        label-position=\"left\"\n      >\n        <el-form-item\n          style=\"margin-bottom: 20px;\"\n          label=\"Enabled\"\n          prop=\"enabled\"\n        >\n          <el-switch v-model=\"postForm.enabled\" />\n        </el-form-item>\n          <el-form-item\n          style=\"margin-bottom: 30px\"\n          label=\"Image\"\n          prop=\"image\"\n        >\n        <upload-image\n          :key=\"renderKey\"\n          :formField=\"postForm.image\"\n          @handle-upload=\"updateTrendingImage\"\n          @handle-remove=\"removeTrendingImage\"\n         />\n         \n           <el-tooltip\n            class=\"item\"\n            effect=\"dark\"\n            content=\"Only Image of dimension 1000 * 1000 is accepted\"\n            placement=\"right-start\"\n          >\n            <span\n              class=\"el-icon-question\"\n              style=\"font-size: 20px;\"\n            />\n          </el-tooltip>\n        </el-form-item>\n\n        <el-form-item\n          style=\"margin-bottom: 20px; margin-top: 20px;\"\n          label=\"Title\"\n          prop=\"title\"\n        >\n          <el-input\n            v-model=\"postForm.title\"\n            name=\"title\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Title\"\n          />\n        </el-form-item>\n        <el-form-item\n          style=\"margin-bottom: 20px; margin-top: 20px;\"\n          label=\"Model Number\"\n          prop=\"modelNo\"\n        >\n          <el-input\n            v-model=\"postForm.modelNo\"\n            name=\"modelNo\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Model Number\"\n          />\n        </el-form-item>\n        <el-form-item\n          style=\"margin-bottom: 20px; margin-top: 20px;\"\n          label=\"Model Name\"\n          prop=\"modelName\"\n        >\n          <el-input\n            v-model=\"postForm.modelName\"\n            name=\"modelName\"\n            style=\"width: 50%\"\n            required\n            placeholder=\"Model Name\"\n          />\n        </el-form-item>\n\n        <el-form-item\n          v-if=\"postForm.redirectionOption == 0\"\n          style=\"margin-bottom: 20px;\"\n          label=\"Category\"\n          prop=\"redirectionValue\"\n          :rules=\"{required: true, message: 'Please input category', trigger: ['blur','change']}\"\n        >\n          <el-select\n            v-model=\"postForm.redirectionValue\"\n            name=\"redirectionValue\"\n            filterable\n            placeholder=\"Select\"\n          >\n            <el-option\n              v-for=\"item in redirectionValue\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            />\n          </el-select>\n        </el-form-item>\n        <el-form-item>\n          <el-button\n            v-loading=\"loading\"\n            v-waves\n            type=\"success\"\n             style=\"background:#59b6e3;border:1px solid #59b6e3\"\n            @click=\"submitForm\"\n          >\n            {{ $t('global.form.save') }}\n          </el-button>\n          <el-button\n            v-waves\n            type=\"reset\"\n            @click=\"resetForm\"\n          >\n            {{ $t('global.form.reset') }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator'\nimport { AppModule } from '@/store/modules/app'\nimport { TagsViewModule, ITagView } from '@/store/modules/tags-view'\nimport { Form } from 'element-ui'\nimport router from '../../../router'\nimport { Action } from 'vuex-module-decorators'\nimport { getAdminsRoles } from '@/api/adminsRoles'\nimport { getQuery } from '../../../utils'\nimport {\n  defaultTrendingData,\n  updateTrending,\n  addTrending,\n  getTrendingById\n} from '@/api/trending'\nimport PanThumb from '@/components/PanThumb/index.vue'\nimport AvatarUpload from '@/components/AvatarUpload/index.vue'\nimport { uploadFile } from '@/api/common'\nimport { getCategorys } from '@/api/category'\nimport UploadImage from '@/components/UploadImage/index.vue'\nimport { getProducts } from '@/api/product'\n\n@Component({\n  name: 'TrendingDetail',\n  components: {\n    // PanThumb,\n    // AvatarUpload,\n    UploadImage\n  }\n})\nexport default class extends Vue {\n  @Prop({ default: false }) private isEdit!: boolean;\n  private redirectionValue: any = []\n  private redirectionOption: any = [\n    {\n      id: 0,\n      name: 'Category Page'\n    }\n  ];\n\n  private showImageUpload = false;\n  private renderKey = 0;\n  private image =\n    'https://via.placeholder.com/';\n\n  private postForm = Object.assign({}, defaultTrendingData);\n  private loading = false;\n  private toggleShow() {\n    this.showImageUpload = !this.showImageUpload\n  }\n  private updateTrendingImage(res:any){\n    this.postForm.image=res;\n  }\n\n   private removeTrendingImage(){\n    this.postForm.image='';\n  }\n\n\n  private onCropUploadSuccess(jsonData: any, field: string) {\n    this.showImageUpload = false\n    this.image = jsonData.files[field]\n  }\n\n  private onClose() {\n    this.showImageUpload = false\n  }\n\n  private cropSuccess(imgDataUrl: string, field: string) {\n    this.image = imgDataUrl\n    \n    const data = new FormData()\n    fetch(imgDataUrl)\n      .then((res) => res.blob())\n      .then((blob) => {\n        const file = new File([blob], 'img.' + blob.type.split('/')[1], {\n          type: 'image/png'\n        })\n        data.append('file', file)\n        uploadFile(data, (event: ProgressEvent) => {\n          console.log(event)\n        }).then((res) => {\n          this.postForm.image = res.toString()\n        })\n      })\n  }\n\n  private rules = {\n\n    image: [\n      {\n        message: 'Please enter image',\n        required: true,\n        trigger: 'blur'\n      }\n    ],\n    redirectionType: [\n      {\n        message: 'Please enter type',\n        required: true,\n        trigger: 'blur'\n      }\n    ]\n  };\n\n  private tempTagView?: ITagView;\n\n  get lang() {\n    return AppModule.language\n  }\n\n  created() {\n    if (this.isEdit) {\n      const id = this.$route.params && this.$route.params.id\n      this.fetchData(parseInt(id))\n    } else {\n      this.postForm = Object.assign({}, defaultTrendingData)\n    }\n    // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of this.setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n    this.tempTagView = Object.assign({}, this.$route)\n  }\n\n  private async fetchData(id: number) {\n    try {\n      const data: any = await getTrendingById(id)\n      this.postForm = data\n      this.renderKey++\n      this.image = data.image\n      this.fetchValues()\n      // Just for test\n      const title = 'image'\n      // Set tagsview title\n      this.setTagsViewTitle(title)\n      // Set page title\n      this.setPageTitle(title)\n    } catch (err) {\n      Promise.reject(err)\n    }\n  }\n\n  private async fetchValues() {\n    this.redirectionValue = await getCategorys(getQuery({\n      enabled: true,\n      isDeleted: false,\n      filter: {\n        enabled: 'eq',\n        isDeleted: 'eq'\n      }\n    }))\n  }\n\n  private setTagsViewTitle(title: string) {\n    const tagView = this.tempTagView\n    if (tagView) {\n      tagView.title = `${title}-${this.postForm.id}`\n      TagsViewModule.updateVisitedView(tagView)\n    }\n  }\n\n  private setPageTitle(title: string) {\n    document.title = `${title} - ${this.postForm.id}`\n  }\n\n  private submitForm() {\n    (this.$refs.postForm as Form).validate((valid) => {\n      if (valid) {\n        this.saveForm()\n      } else {\n        return false\n      }\n    })\n  }\n\n  private resetForm() {\n    (this.$refs.postForm as Form).resetFields()\n    \n    this.renderKey--\n    this.postForm.image = ''\n  }\n\n  @Action\n  public async saveForm() {\n    try {\n      this.loading = true\n      if (this.isEdit) {\n        await updateTrending(this.postForm.id, this.postForm)\n      } else {\n        await addTrending(this.postForm)\n      }\n\n      this.$notify({\n        title: 'Success',\n        message: 'Trending saved successfully',\n        type: 'success',\n        duration: 2000\n      })\n      router.push('/trending/list')\n    } catch (err) {\n      this.loading = false\n    }\n  }\n}\n</script>\n<style lang=\"scss\">\n.admin-textarea {\n  textarea {\n    padding-right: 40px;\n    resize: none;\n    border: none;\n    border-radius: 0px;\n    border-bottom: 1px solid $textAreaBottom;\n  }\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.createPost-container {\n  position: relative;\n\n  .createPost-main-container {\n    padding: 40px 45px 20px 50px;\n\n    .postInfo-container {\n      position: relative;\n      @include clearfix;\n      margin-bottom: 10px;\n\n      .postInfo-container-item {\n        float: left;\n      }\n    }\n  }\n\n  .word-counter {\n    width: 40px;\n    position: absolute;\n    right: 10px;\n    top: 0px;\n  }\n}\n</style>\n"]}]}