{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/babel-loader/lib/index.js!/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/ts-loader/index.js??ref--15-2!/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/eslint-loader/index.js??ref--14-0!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/pwa/register-service-worker.ts","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/pwa/register-service-worker.ts","mtime":1668754947370},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/babel.config.js","mtime":1668754947334},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/babel-loader/lib/index.js","mtime":1668596430903},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/ts-loader/index.js","mtime":1650280622125},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/eslint-loader/index.js","mtime":1655274294254}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9yZWdpc3RlclNlcnZpY2VXb3JrZXIgPSByZXF1aXJlKCJyZWdpc3Rlci1zZXJ2aWNlLXdvcmtlciIpOwovKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovCgppZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgewogICgwLCBfcmVnaXN0ZXJTZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKShgJHtwcm9jZXNzLmVudi5CQVNFX1VSTH1zZXJ2aWNlLXdvcmtlci5qc2AsIHsKICAgIHJlYWR5KCkgewogICAgICBjb25zb2xlLmxvZygnQXBwIGlzIGJlaW5nIHNlcnZlZCBmcm9tIGNhY2hlIGJ5IGEgc2VydmljZSB3b3JrZXIuXG4nICsgJ0ZvciBtb3JlIGRldGFpbHMsIHZpc2l0IGh0dHBzOi8vZ29vLmdsL0FGc2txQicpOwogICAgfSwKICAgIHJlZ2lzdGVyZWQocmVnaXN0cmF0aW9uKSB7CiAgICAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlIHdvcmtlciBoYXMgYmVlbiByZWdpc3RlcmVkLicpOwogICAgICAvLyBSb3V0aW5lbHkgY2hlY2sgZm9yIGFwcCB1cGRhdGVzIGJ5IHRlc3RpbmcgZm9yIGEgbmV3IHNlcnZpY2Ugd29ya2VyLgogICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgcmVnaXN0cmF0aW9uLnVwZGF0ZSgpOwogICAgICB9LCAxMDAwICogNjAgKiA2MCk7IC8vIGhvdXJseSBjaGVja3MKICAgIH0sCgogICAgY2FjaGVkKCkgewogICAgICBjb25zb2xlLmxvZygnQ29udGVudCBoYXMgYmVlbiBjYWNoZWQgZm9yIG9mZmxpbmUgdXNlLicpOwogICAgfSwKICAgIHVwZGF0ZWZvdW5kKCkgewogICAgICBjb25zb2xlLmxvZygnTmV3IGNvbnRlbnQgaXMgZG93bmxvYWRpbmcuJyk7CiAgICB9LAogICAgdXBkYXRlZChyZWdpc3RyYXRpb24pIHsKICAgICAgY29uc29sZS5sb2coJ05ldyBjb250ZW50IGlzIGF2YWlsYWJsZTsgcGxlYXNlIHJlZnJlc2guJyk7CiAgICAgIC8vIEFkZCBhIGN1c3RvbSBldmVudCBhbmQgZGlzcGF0Y2ggaXQuCiAgICAgIC8vIFVzZWQgdG8gZGlzcGxheSBvZiBhICdyZWZyZXNoJyBiYW5uZXIgZm9sbG93aW5nIGEgc2VydmljZSB3b3JrZXIgdXBkYXRlLgogICAgICAvLyBTZXQgdGhlIGV2ZW50IHBheWxvYWQgdG8gdGhlIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBvYmplY3QuCiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzd1VwZGF0ZWQnLCB7CiAgICAgICAgZGV0YWlsOiByZWdpc3RyYXRpb24KICAgICAgfSkpOwogICAgfSwKICAgIG9mZmxpbmUoKSB7CiAgICAgIGNvbnNvbGUubG9nKCdObyBpbnRlcm5ldCBjb25uZWN0aW9uIGZvdW5kLiBBcHAgaXMgcnVubmluZyBpbiBvZmZsaW5lIG1vZGUuJyk7CiAgICB9LAogICAgZXJyb3IoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjonLCBlcnJvcik7CiAgICB9CiAgfSk7Cn0="},{"version":3,"mappings":";;AAEA;AAFA;;AAIA,IAAIA,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzC,mCAAQ,EAAC,GAAGF,OAAO,CAACC,GAAG,CAACE,QAAQ,mBAAmB,EAAE;IACnDC,KAAK;MACHC,OAAO,CAACC,GAAG,CACT,uDAAuD,GACvD,+CAA+C,CAChD;IACH,CAAC;IACDC,UAAU,CAACC,YAAY;MACrBH,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD;MACAG,WAAW,CAAC,MAAK;QACfD,YAAY,CAACE,MAAM,EAAE;MACvB,CAAC,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,EAAC;IACrB,CAAC;;IACDC,MAAM;MACJN,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACzD,CAAC;IACDM,WAAW;MACTP,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC;IACDO,OAAO,CAACL,YAAY;MAClBH,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxD;MACA;MACA;MACAQ,QAAQ,CAACC,aAAa,CACpB,IAAIC,WAAW,CAAC,WAAW,EAAE;QAAEC,MAAM,EAAET;MAAY,CAAE,CAAC,CACvD;IACH,CAAC;IACDU,OAAO;MACLb,OAAO,CAACC,GAAG,CAAC,+DAA+D,CAAC;IAC9E,CAAC;IACDa,KAAK,CAACA,KAAK;MACTd,OAAO,CAACc,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE;GACD,CAAC","names":["process","env","NODE_ENV","BASE_URL","ready","console","log","registered","registration","setInterval","update","cached","updatefound","updated","document","dispatchEvent","CustomEvent","detail","offline","error"],"sourceRoot":"","sources":["/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/eslint-loader/index.js??ref--14-0!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/pwa/register-service-worker.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}service-worker.js`, {\n    ready() {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered(registration) {\n      console.log('Service worker has been registered.')\n      // Routinely check for app updates by testing for a new service worker.\n      setInterval(() => {\n        registration.update()\n      }, 1000 * 60 * 60) // hourly checks\n    },\n    cached() {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound() {\n      console.log('New content is downloading.')\n    },\n    updated(registration) {\n      console.log('New content is available; please refresh.')\n      // Add a custom event and dispatch it.\n      // Used to display of a 'refresh' banner following a service worker update.\n      // Set the event payload to the service worker registration object.\n      document.dispatchEvent(\n        new CustomEvent('swUpdated', { detail: registration })\n      )\n    },\n    offline() {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error(error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n"]}]}