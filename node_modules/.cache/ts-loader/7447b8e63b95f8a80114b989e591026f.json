{"remainingRequest":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/babel-loader/lib/index.js!/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/ts-loader/index.js??ref--15-2!/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/eslint-loader/index.js??ref--14-0!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/utils/request.ts","dependencies":[{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/utils/request.ts","mtime":1668754947370},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/babel.config.js","mtime":1668754947334},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/cache-loader/dist/cjs.js","mtime":1655274288430},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/babel-loader/lib/index.js","mtime":1668596430903},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/ts-loader/index.js","mtime":1650280622125},{"path":"/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/eslint-loader/index.js","mtime":1655274294254}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCIvaG9tZS9hbGdvb2NlYW4vRGVza3RvcC9BT1QtUHJvamVjdC9teXZhcm5pLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIpLmRlZmF1bHQ7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwp2YXIgX2F4aW9zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJheGlvcyIpKTsKdmFyIF9lbGVtZW50VWkgPSByZXF1aXJlKCJlbGVtZW50LXVpIik7CnZhciBfYWRtaW4gPSByZXF1aXJlKCJAL3N0b3JlL21vZHVsZXMvYWRtaW4iKTsKdmFyIF9xcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicXMiKSk7CmNvbnN0IHNlcnZpY2UgPSBfYXhpb3MuZGVmYXVsdC5jcmVhdGUoewogIGJhc2VVUkw6IHByb2Nlc3MuZW52LlZVRV9BUFBfQkFTRV9BUEksCiAgdGltZW91dDogMTAwMDAKICAvLyB3aXRoQ3JlZGVudGlhbHM6IHRydWUgLy8gc2VuZCBjb29raWVzIHdoZW4gY3Jvc3MtZG9tYWluIHJlcXVlc3RzIHNhbmRlc2ggcmVhZCBhYm91dCBpdAp9KTsKLy8gUmVxdWVzdCBpbnRlcmNlcHRvcnMKc2VydmljZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoY29uZmlnID0+IHsKICAvLyBBZGQgWC1BY2Nlc3MtVG9rZW4gaGVhZGVyIHRvIGV2ZXJ5IHJlcXVlc3QsIHlvdSBjYW4gYWRkIG90aGVyIGN1c3RvbSBoZWFkZXJzIGhlcmUKICBpZiAoX2FkbWluLkFkbWluTW9kdWxlLnRva2VuKSB7CiAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgX2FkbWluLkFkbWluTW9kdWxlLnRva2VuOwogIH0KICAvLyBpZiB0eXBlIGdldCB0aGVuIHNlcmlhbGl6ZSBwYXJhbXMKICBpZiAoY29uZmlnLm1ldGhvZCA9PT0gJ2dldCcpIHsKICAgIC8vIGNoZWNrIGlmIGZpbHRlciBleGlzdAogICAgaWYgKGNvbmZpZy5wYXJhbXMgJiYgY29uZmlnLnBhcmFtcy5maWx0ZXIgJiYgY29uZmlnLnBhcmFtcy5maWx0ZXIubGVuZ3RoID4gMCkgewogICAgICBjb25maWcucGFyYW1zU2VyaWFsaXplciA9IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgICAgICByZXR1cm4gX3FzLmRlZmF1bHQuc3RyaW5naWZ5KHBhcmFtcywgewogICAgICAgICAgYXJyYXlGb3JtYXQ6ICdyZXBlYXQnCiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfSBlbHNlIGlmIChjb25maWcubWV0aG9kID09PSAncGF0Y2gnKSB7CiAgICBjb25maWcuZGF0YS51cGRhdGVkQnkgPSBfYWRtaW4uQWRtaW5Nb2R1bGUuaWQ7CiAgfSBlbHNlIGlmIChjb25maWcubWV0aG9kID09PSAncG9zdCcgJiYgY29uZmlnLmRhdGEpIHsKICAgIGNvbmZpZy5kYXRhLmNyZWF0ZWRCeSA9IF9hZG1pbi5BZG1pbk1vZHVsZS5pZDsKICB9CiAgcmV0dXJuIGNvbmZpZzsKfSwgZXJyb3IgPT4gewogIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7Ci8vIFJlc3BvbnNlIGludGVyY2VwdG9ycwpzZXJ2aWNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UocmVzcG9uc2UgPT4gewogIC8vIFNvbWUgZXhhbXBsZSBjb2RlcyBoZXJlOgogIC8vIGNvZGUgPT0gMjAwMDA6IHN1Y2Nlc3MKICAvLyBjb2RlID09IDUwMDAxOiBpbnZhbGlkIGFjY2VzcyB0b2tlbgogIC8vIGNvZGUgPT0gNTAwMDI6IGFscmVhZHkgbG9naW4gaW4gb3RoZXIgcGxhY2UKICAvLyBjb2RlID09IDUwMDAzOiBhY2Nlc3MgdG9rZW4gZXhwaXJlZAogIC8vIGNvZGUgPT0gNTAwMDQ6IGludmFsaWQgdXNlciAodXNlciBub3QgZXhpc3QpCiAgLy8gY29kZSA9PSA1MDAwNTogdXNlcm5hbWUgb3IgcGFzc3dvcmQgaXMgaW5jb3JyZWN0CiAgLy8gWW91IGNhbiBjaGFuZ2UgdGhpcyBwYXJ0IGZvciB5b3VyIG93biB1c2FnZS4KICByZXR1cm4gcmVzcG9uc2UuZGF0YTsKfSwgZXJyb3IgPT4gewogIGlmICghZXJyb3IucmVzcG9uc2UpIHsKICAgIC8vIG5ldHdvcmsgZXJyb3IKICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICdOZXR3b3JrIGVycm9yISc7CiAgICAoMCwgX2VsZW1lbnRVaS5NZXNzYWdlKSh7CiAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSwKICAgICAgdHlwZTogJ2Vycm9yJywKICAgICAgZHVyYXRpb246IDUgKiAxMDAwCiAgICB9KTsKICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvck1lc3NhZ2UpOwogIH0gZWxzZSBpZiAoZXJyb3IucmVzcG9uc2UpIHsKICAgIGlmIChlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UpIHsKICAgICAgKDAsIF9lbGVtZW50VWkuTWVzc2FnZSkoewogICAgICAgIG1lc3NhZ2U6IGVycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZSwKICAgICAgICB0eXBlOiAnZXJyb3InLAogICAgICAgIGR1cmF0aW9uOiA1ICogMTAwMAogICAgICB9KTsKICAgIH0KICB9CiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yLnJlc3BvbnNlLmRhdGEpOwp9KTsKdmFyIF9kZWZhdWx0ID0gc2VydmljZTsKZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7"},{"version":3,"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAGC,cAAK,CAACC,MAAM,CAAC;EAC3BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB;EACrCC,OAAO,EAAE;EACT;CACD,CAAC;AAEF;AACAP,OAAO,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACT;EACA,IAAIC,kBAAW,CAACC,KAAK,EAAE;IACrBF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAG,SAAS,GAAGH,kBAAW,CAACC,KAAK;;EAE9D;EACA,IAAIF,MAAM,CAACK,MAAM,KAAK,KAAK,EAAE;IAC3B;IACA,IAAIL,MAAM,CAACM,MAAM,IAAIN,MAAM,CAACM,MAAM,CAACC,MAAM,IAAIP,MAAM,CAACM,MAAM,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5ER,MAAM,CAACS,gBAAgB,GAAG,UAASH,MAAM;QACvC,OAAOI,WAAE,CAACC,SAAS,CAACL,MAAM,EAAE;UAAEM,WAAW,EAAE;QAAQ,CAAE,CAAC;MACxD,CAAC;;GAEJ,MAAM,IAAIZ,MAAM,CAACK,MAAM,KAAK,OAAO,EAAE;IACpCL,MAAM,CAACa,IAAI,CAACC,SAAS,GAAGb,kBAAW,CAACc,EAAE;GACvC,MAAM,IAAIf,MAAM,CAACK,MAAM,KAAK,MAAM,IAAIL,MAAM,CAACa,IAAI,EAAE;IAClDb,MAAM,CAACa,IAAI,CAACG,SAAS,GAAGf,kBAAW,CAACc,EAAE;;EAExC,OAAOf,MAAM;AACf,CAAC,EACAiB,KAAK,IAAI;EACRC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACvB,CAAC,CACF;AAED;AACA5B,OAAO,CAACQ,YAAY,CAACuB,QAAQ,CAACrB,GAAG,CAC9BqB,QAAQ,IAAI;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOA,QAAQ,CAACP,IAAI;AACtB,CAAC,EACAI,KAAK,IAAI;EACR,IAAI,CAACA,KAAK,CAACG,QAAQ,EAAE;IACnB;IACA,MAAMC,YAAY,GAAG,gBAAgB;IACrC,sBAAO,EAAC;MACNC,OAAO,EAAED,YAAY;MACrBE,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;KACf,CAAC;IACF,OAAON,OAAO,CAACC,MAAM,CAACE,YAAY,CAAC;GACpC,MAAM,IAAIJ,KAAK,CAACG,QAAQ,EAAE;IACzB,IAAIH,KAAK,CAACG,QAAQ,CAACP,IAAI,CAACS,OAAO,EAAE;MAC/B,sBAAO,EAAC;QACNA,OAAO,EAAEL,KAAK,CAACG,QAAQ,CAACP,IAAI,CAACS,OAAO;QACpCC,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE,CAAC,GAAG;OACf,CAAC;;;EAGN,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAACG,QAAQ,CAACP,IAAI,CAAC;AAC5C,CAAC,CACF;AAAA,eAEcxB,OAAO;AAAA","names":["service","axios","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","AdminModule","token","headers","Authorization","method","params","filter","length","paramsSerializer","Qs","stringify","arrayFormat","data","updatedBy","id","createdBy","error","Promise","reject","response","errorMessage","message","type","duration"],"sourceRoot":"","sources":["/home/algoocean/Desktop/AOT-Project/myvarni-admin/node_modules/eslint-loader/index.js??ref--14-0!/home/algoocean/Desktop/AOT-Project/myvarni-admin/src/utils/request.ts"],"sourcesContent":["import axios from 'axios'\nimport { Message, MessageBox } from 'element-ui'\nimport { AdminModule } from '@/store/modules/admin'\nimport Qs from 'qs'\n\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\n  timeout: 10000\n  // withCredentials: true // send cookies when cross-domain requests sandesh read about it\n})\n\n// Request interceptors\nservice.interceptors.request.use(\n  (config) => {\n    // Add X-Access-Token header to every request, you can add other custom headers here\n    if (AdminModule.token) {\n      config.headers.Authorization = 'Bearer ' + AdminModule.token\n    }\n    // if type get then serialize params\n    if (config.method === 'get') {\n      // check if filter exist\n      if (config.params && config.params.filter && config.params.filter.length > 0) {\n        config.paramsSerializer = function(params) {\n          return Qs.stringify(params, { arrayFormat: 'repeat' })\n        }\n      }\n    } else if (config.method === 'patch') {\n      config.data.updatedBy = AdminModule.id\n    } else if (config.method === 'post' && config.data) {\n      config.data.createdBy = AdminModule.id\n    }\n    return config\n  },\n  (error) => {\n    Promise.reject(error)\n  }\n)\n\n// Response interceptors\nservice.interceptors.response.use(\n  (response) => {\n    // Some example codes here:\n    // code == 20000: success\n    // code == 50001: invalid access token\n    // code == 50002: already login in other place\n    // code == 50003: access token expired\n    // code == 50004: invalid user (user not exist)\n    // code == 50005: username or password is incorrect\n    // You can change this part for your own usage.\n    return response.data\n  },\n  (error) => {\n    if (!error.response) {\n      // network error\n      const errorMessage = 'Network error!'\n      Message({\n        message: errorMessage,\n        type: 'error',\n        duration: 5 * 1000\n      })\n      return Promise.reject(errorMessage)\n    } else if (error.response) {\n      if (error.response.data.message) {\n        Message({\n          message: error.response.data.message,\n          type: 'error',\n          duration: 5 * 1000\n        })\n      }\n    }\n    return Promise.reject(error.response.data)\n  }\n)\n\nexport default service\n"]}]}